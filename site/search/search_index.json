{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","tags":null,"text":"General Public Invidious Instances Extensions Always proxy videos through server Preferences Geoblocking, available quality and DASH Using search operators List of URL parameters How to deal with uMatrix For Administrators Installation Configuration Apache2 Virtual Host with Reverse Proxy Nginx Reverse Proxy Configuration Database Information and Maintenance Issues with CAPTCHA How to setup Anti-Captcha For Developers API Authenticated Endpoints","title":"HOME"},{"location":"#general","text":"Public Invidious Instances Extensions Always proxy videos through server Preferences Geoblocking, available quality and DASH Using search operators List of URL parameters How to deal with uMatrix","title":"General"},{"location":"#for-administrators","text":"Installation Configuration Apache2 Virtual Host with Reverse Proxy Nginx Reverse Proxy Configuration Database Information and Maintenance Issues with CAPTCHA How to setup Anti-Captcha","title":"For Administrators"},{"location":"#for-developers","text":"API Authenticated Endpoints","title":"For Developers"},{"location":"API/","tags":null,"text":"Language All endpoints that return a JSON body support &hl=LANGUAGE for translating fields into the desired language. A list of languages are provided in List of URL parameters . Pretty All endpoints that return a JSON body support &pretty=1 for printing the response as formatted JSON. Fields All endpoints that return a JSON body support the fields API for specifying desired fields to reduce bandwidth consumption. This can be used by adding &fields=FIELDS with the desired fields, for example /api/v1/videos/aqz-KE-bpKQ?fields=videoId,title,description&pretty=1 . GET /api/v1/stats Schema: { \"version\": String, \"software\": { \"name\": \"invidious\", \"version\": String, \"branch\": String }, \"openRegistrations\": Bool, \"usage\": { \"users\": { \"total\": Int32, \"activeHalfyear\": Int32, \"activeMonth\": Int32 } }, \"metadata\": { \"updatedAt\": Int64, \"lastChannelRefreshedAt\": Int64 } } GET /api/v1/videos/:id Schema: { \"title\": String, \"videoId\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"description\": String, \"descriptionHtml\": String, \"published\": Int64, \"publishedText\": String, \"keywords\": Array(String), \"viewCount\": Int64, \"likeCount\": Int32, \"dislikeCount\": Int32, \"paid\": Bool, \"premium\": Bool, \"isFamilyFriendly\": Bool, \"allowedRegions\": Array(String), \"genre\": String, \"genreUrl\": String, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"authorThumbnails\": [ { \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"subCountText\": String, \"lengthSeconds\": Int32, \"allowRatings\": Bool, \"rating\": Float32, \"isListed\": Bool, \"liveNow\": Bool, \"isUpcoming\": Bool, \"premiereTimestamp\": Int64?, \"hlsUrl\": String?, \"adaptiveFormats\": [ { \"index\": String, \"bitrate\": String, \"init\": String, \"url\": String, \"itag\": String, \"type\": String, \"clen\": String, \"lmt\": String, \"projectionType\": Int32, \"container\": String, \"encoding\": String, \"qualityLabel\": String?, \"resolution\": String? } ], \"formatStreams\": [ { \"url\": String, \"itag\": String, \"type\": String, \"quality\": String, \"container\": String, \"encoding\": String, \"qualityLabel\": String, \"resolution\": String, \"size\": String } ], \"captions\": [ { \"label\": String, \"languageCode\": String, \"url\": String } ], \"recommendedVideos\": [ { \"videoId\": String, \"title\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"author\": String, \"lengthSeconds\": Int32, \"viewCountText\": String } ] } Parameters: region: ISO 3166 country code (default: \"US\") GET /api/v1/annotations/:id Parameters: source: \"archive\", \"youtube\" (default: \"archive\") Returns annotation XML from YouTube's /annotations_invideo endpoint. Alternatively it provides access to legacy annotation data using this collection on archive.org. GET /api/v1/comments/:id Schema: { \"commentCount\": Int32?, \"videoId\": String, \"comments\": [ { \"author\": String, \"authorThumbnails\": [ { \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"authorId\": String, \"authorUrl\": String, \"isEdited\": Bool, \"content\": String, \"contentHtml\": String, \"published\": Int64, \"publishedText\": String, \"likeCount\": Int32, \"commentId\": String, \"authorIsChannelOwner\": Bool, \"creatorHeart\": { \"creatorThumbnail\": String, \"creatorName\": String }?, \"replies\": { \"replyCount\": Int32, \"continuation\": String }? } ], \"continuation\": String? } Parameters: sort_by: \"top\", \"new\" (default: top) source: \"youtube\", \"reddit\" (default: youtube) continuation: String GET /api/v1/captions/:id Schema: { \"captions\": [ { \"label\": String, \"languageCode\": String, \"url\": String } ] } Parameters: label: String lang: String tlang: String region: ISO 3166 country code (default: \"US\") A request with label will return the selected captions in WebVTT format. Captions can also be selected with an ISO lang , e.g. &lang=en, tlang will auto-translate from English into the requested language (if English captions are available). GET /api/v1/trending Schema: [ { \"title\": String, \"videoId\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"lengthSeconds\": Int32, \"viewCount\": Int64, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"published\": Int64, \"publishedText\": String, \"description\": String, \"descriptionHtml\": String, \"liveNow\": Bool, \"paid\": Bool, \"premium\": Bool } ] Parameters: type: \"music\", \"gaming\", \"news\", \"movies\" region: ISO 3166 country code (default: \"US\") GET /api/v1/popular Schema: [ { \"type\": \"shortVideo\", \"title\": String, \"videoId\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"lengthSeconds\": Int32, \"viewCount\": Int64, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"published\": Int64, \"publishedText\": String } ] GET /api/v1/channels/:ucid Schema: { \"author\": String, \"authorId\": String, \"authorUrl\": String, \"authorBanners\": [ { \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"authorThumbnails\": [ { \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"subCount\": Int32, \"totalViews\": Int64, \"joined\": Int64, \"paid\": Bool, \"autoGenerated\": Bool, \"isFamilyFriendly\": Bool, \"description\": String, \"descriptionHtml\": String, \"allowedRegions\": Array(String), \"latestVideos\": [ { \"title\": String, \"videoId\": String, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"description\": String, \"descriptionHtml\": String, \"viewCount\": Int64, \"published\": Int64, \"publishedText\": String, \"lengthSeconds\": Int32, \"paid\": Bool, \"premium\": Bool } ], \"relatedChannels\": [ { \"author\": String, \"authorId\": String, \"authorUrl\": String, \"authorThumbnails\": [ { \"url\": String, \"width\": Int32, \"height\": Int32 } ] } ] } Parameters: sort_by: \"newest\", \"oldest\", \"popular\" (default: newest) Note that a channel's username (if it doesn't include spaces) is also valid in place of ucid , e.g. /api/v1/channels/BlenderFoundation . GET /api/v1/channels/:ucid/videos , /api/v1/channels/videos/:ucid Schema: [ { title: String, videoId: String, author: String, authorId: String, authorUrl: String, videoThumbnails: [ { quality: String, url: String, width: Int32, height: Int32 } ], description: String, descriptionHtml: String, viewCount: Int64, published: Int64, publishedText: String, lengthSeconds: Int32 paid: Bool, premium: Bool } ] Parameters: page: Int32 sort_by: \"newest\", \"oldest\", \"popular\" (default: newest) GET /api/v1/channels/:ucid/latest , /api/v1/channels/latest/:ucid [ { title: String, videoId: String, authorId: String, authorUrl: String, videoThumbnails: [ { quality: String, url: String, width: Int32, height: Int32 } ], description: String, descriptionHtml: String, viewCount: Int64, published: Int64, publishedText: String, lengthSeconds: Int32 paid: Bool, premium: Bool } ] GET /api/v1/channels/playlists/:ucid , /api/v1/channels/:ucid/playlists { \"playlists\": [ { \"title\": String, \"playlistId\": String, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"videoCount\": Int32, \"videos\": [ { \"title\": String, \"videoId\": String, \"lengthSeconds\": Int32, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ] } ] ], \"continuation\": String? } Parameters: continuation: String sort_by: \"oldest\", \"newest\", \"last\" GET /api/v1/channels/comments/:ucid , /api/v1/channels/:ucid/comments { \"authorId\": String, \"comments\": [ { \"author\": String, \"authorThumbnails\": [ \"url\": String, \"width\": Int32, \"height\": Int32 ], \"authorId\": String, \"authorUrl\": String, \"isEdited\": Bool, \"content\": String, \"contentHtml\": String, \"published\": Int64, \"publishedText\": String, \"likeCount\": Int32, \"commentId\": String, \"authorIsChannelOwner\": Bool, \"creatorHeart\": { \"creatorThumbnail\": String, \"creatorName\": String }?, \"replies\": { \"replyCount\": Int32, \"continuation\": String }?, \"attachment\": Attachment? } ], \"continuation\": String? } The authorId for top-level comments will always(?) be the same as the requested channel. Top-level comments will also have an optional attachment , which can be one of: { \"type\": \"image\", \"imageThumbnails\": [ { \"url\": String, \"width\": Int32, \"height\": Int32 } ] } { \"type\": \"video\", \"title\": String, \"videoId\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"lengthSeconds\": Int32, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"published\": Int64, \"publishedText\": String, \"viewCount\": Int64, \"viewCountText\": String } { \"type\": \"unknown\", \"error\": \"Unrecognized attachment type.\" } Some attachments may only have a type and error , similar to the above. Attachments will only be present on top-level comments. Parameters: continuation: String GET /api/v1/channels/search/:ucid Schema: [ { type: \"video\", title: String, videoId: String, author: String, authorId: String, authorUrl: String, videoThumbnails: [ { quality: String, url: String, width: Int32, height: Int32 } ], description: String, descriptionHtml: String, viewCount: Int64, published: Int64, publishedText: String, lengthSeconds: Int32, liveNow: Bool, paid: Bool, premium: Bool }, { type: \"playlist\", title: String, playlistId: String, author: String, authorId: String, authorUrl: String, videoCount: Int32, videos: [ { title: String, videoId: String, lengthSeconds: Int32, videoThumbnails: [ { quality: String, url: String, width: Int32, height: Int32 } ] } ] }, { type: \"channel\", author: String, authorId: String, authorUrl: String, authorThumbnails: [ { url: String, width: Int32, height: Int32 } ], subCount: Int32, videoCount: Int32, description: String, descriptionHtml: String } ]; Parameters: q: String page: Int32 GET /api/v1/search/suggestions Schema: { \"query\": String, \"suggestions\": Array(String) } Parameters: q: String GET /api/v1/search Schema: [ { type: \"video\", title: String, videoId: String, author: String, authorId: String, authorUrl: String, videoThumbnails: [ { quality: String, url: String, width: Int32, height: Int32 } ], description: String, descriptionHtml: String, viewCount: Int64, published: Int64, publishedText: String, lengthSeconds: Int32, liveNow: Bool, paid: Bool, premium: Bool }, { type: \"playlist\", title: String, playlistId: String, author: String, authorId: String, authorUrl: String, videoCount: Int32, videos: [ { title: String, videoId: String, lengthSeconds: Int32, videoThumbnails: [ { quality: String, url: String, width: Int32, height: Int32 } ] } ] }, { type: \"channel\", author: String, authorId: String, authorUrl: String, authorThumbnails: [ { url: String, width: Int32, height: Int32 } ], subCount: Int32, videoCount: Int32, description: String, descriptionHtml: String } ]; Parameters: q: String page: Int32 sort_by: \"relevance\", \"rating\", \"upload_date\", \"view_count\" date: \"hour\", \"today\", \"week\", \"month\", \"year\" duration: \"short\", \"long\" type: \"video\", \"playlist\", \"channel\", \"all\", (default: video) features: \"hd\", \"subtitles\", \"creative_commons\", \"3d\", \"live\", \"purchased\", \"4k\", \"360\", \"location\", \"hdr\" (comma separated: e.g. \"&features=hd,subtitles,3d,live\") region: ISO 3166 country code (default: \"US\") GET /api/v1/playlists/:plid Schema: { \"title\": String, \"playlistId\": String, \"author\": String, \"authorId\": String, \"authorThumbnails\": [ { \"url\": String, \"width\": String, \"height\": String } ], \"description\": String, \"descriptionHtml\": String, \"videoCount\": Int32, \"viewCount\": Int64, \"updated\": Int64, \"videos\": [ { \"title\": String, \"videoId\": String, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"index\": Int32, \"lengthSeconds\": Int32 } ] } Parameters: page: Int32 GET /api/v1/mixes/:rdid Schema: { title: String, mixId: String, videos: [ { title: String, videoId: String, author: String, authorId: String, authorUrl: String, videoThumbnails: [ { quality: String, url: String, width: Int32, height: Int32 } ], index: Int32, lengthSeconds: Int32 } ] }","title":"API"},{"location":"API/#language","text":"All endpoints that return a JSON body support &hl=LANGUAGE for translating fields into the desired language. A list of languages are provided in List of URL parameters .","title":"Language"},{"location":"API/#pretty","text":"All endpoints that return a JSON body support &pretty=1 for printing the response as formatted JSON.","title":"Pretty"},{"location":"API/#fields","text":"All endpoints that return a JSON body support the fields API for specifying desired fields to reduce bandwidth consumption. This can be used by adding &fields=FIELDS with the desired fields, for example /api/v1/videos/aqz-KE-bpKQ?fields=videoId,title,description&pretty=1 .","title":"Fields"},{"location":"API/#get-apiv1stats","text":"Schema: { \"version\": String, \"software\": { \"name\": \"invidious\", \"version\": String, \"branch\": String }, \"openRegistrations\": Bool, \"usage\": { \"users\": { \"total\": Int32, \"activeHalfyear\": Int32, \"activeMonth\": Int32 } }, \"metadata\": { \"updatedAt\": Int64, \"lastChannelRefreshedAt\": Int64 } }","title":"GET /api/v1/stats"},{"location":"API/#get-apiv1videosid","text":"Schema: { \"title\": String, \"videoId\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"description\": String, \"descriptionHtml\": String, \"published\": Int64, \"publishedText\": String, \"keywords\": Array(String), \"viewCount\": Int64, \"likeCount\": Int32, \"dislikeCount\": Int32, \"paid\": Bool, \"premium\": Bool, \"isFamilyFriendly\": Bool, \"allowedRegions\": Array(String), \"genre\": String, \"genreUrl\": String, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"authorThumbnails\": [ { \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"subCountText\": String, \"lengthSeconds\": Int32, \"allowRatings\": Bool, \"rating\": Float32, \"isListed\": Bool, \"liveNow\": Bool, \"isUpcoming\": Bool, \"premiereTimestamp\": Int64?, \"hlsUrl\": String?, \"adaptiveFormats\": [ { \"index\": String, \"bitrate\": String, \"init\": String, \"url\": String, \"itag\": String, \"type\": String, \"clen\": String, \"lmt\": String, \"projectionType\": Int32, \"container\": String, \"encoding\": String, \"qualityLabel\": String?, \"resolution\": String? } ], \"formatStreams\": [ { \"url\": String, \"itag\": String, \"type\": String, \"quality\": String, \"container\": String, \"encoding\": String, \"qualityLabel\": String, \"resolution\": String, \"size\": String } ], \"captions\": [ { \"label\": String, \"languageCode\": String, \"url\": String } ], \"recommendedVideos\": [ { \"videoId\": String, \"title\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"author\": String, \"lengthSeconds\": Int32, \"viewCountText\": String } ] } Parameters: region: ISO 3166 country code (default: \"US\")","title":"GET /api/v1/videos/:id"},{"location":"API/#get-apiv1annotationsid","text":"Parameters: source: \"archive\", \"youtube\" (default: \"archive\") Returns annotation XML from YouTube's /annotations_invideo endpoint. Alternatively it provides access to legacy annotation data using this collection on archive.org.","title":"GET /api/v1/annotations/:id"},{"location":"API/#get-apiv1commentsid","text":"Schema: { \"commentCount\": Int32?, \"videoId\": String, \"comments\": [ { \"author\": String, \"authorThumbnails\": [ { \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"authorId\": String, \"authorUrl\": String, \"isEdited\": Bool, \"content\": String, \"contentHtml\": String, \"published\": Int64, \"publishedText\": String, \"likeCount\": Int32, \"commentId\": String, \"authorIsChannelOwner\": Bool, \"creatorHeart\": { \"creatorThumbnail\": String, \"creatorName\": String }?, \"replies\": { \"replyCount\": Int32, \"continuation\": String }? } ], \"continuation\": String? } Parameters: sort_by: \"top\", \"new\" (default: top) source: \"youtube\", \"reddit\" (default: youtube) continuation: String","title":"GET /api/v1/comments/:id"},{"location":"API/#get-apiv1captionsid","text":"Schema: { \"captions\": [ { \"label\": String, \"languageCode\": String, \"url\": String } ] } Parameters: label: String lang: String tlang: String region: ISO 3166 country code (default: \"US\") A request with label will return the selected captions in WebVTT format. Captions can also be selected with an ISO lang , e.g. &lang=en, tlang will auto-translate from English into the requested language (if English captions are available).","title":"GET /api/v1/captions/:id"},{"location":"API/#get-apiv1trending","text":"Schema: [ { \"title\": String, \"videoId\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"lengthSeconds\": Int32, \"viewCount\": Int64, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"published\": Int64, \"publishedText\": String, \"description\": String, \"descriptionHtml\": String, \"liveNow\": Bool, \"paid\": Bool, \"premium\": Bool } ] Parameters: type: \"music\", \"gaming\", \"news\", \"movies\" region: ISO 3166 country code (default: \"US\")","title":"GET /api/v1/trending"},{"location":"API/#get-apiv1popular","text":"Schema: [ { \"type\": \"shortVideo\", \"title\": String, \"videoId\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"lengthSeconds\": Int32, \"viewCount\": Int64, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"published\": Int64, \"publishedText\": String } ]","title":"GET /api/v1/popular"},{"location":"API/#get-apiv1channelsucid","text":"Schema: { \"author\": String, \"authorId\": String, \"authorUrl\": String, \"authorBanners\": [ { \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"authorThumbnails\": [ { \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"subCount\": Int32, \"totalViews\": Int64, \"joined\": Int64, \"paid\": Bool, \"autoGenerated\": Bool, \"isFamilyFriendly\": Bool, \"description\": String, \"descriptionHtml\": String, \"allowedRegions\": Array(String), \"latestVideos\": [ { \"title\": String, \"videoId\": String, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"description\": String, \"descriptionHtml\": String, \"viewCount\": Int64, \"published\": Int64, \"publishedText\": String, \"lengthSeconds\": Int32, \"paid\": Bool, \"premium\": Bool } ], \"relatedChannels\": [ { \"author\": String, \"authorId\": String, \"authorUrl\": String, \"authorThumbnails\": [ { \"url\": String, \"width\": Int32, \"height\": Int32 } ] } ] } Parameters: sort_by: \"newest\", \"oldest\", \"popular\" (default: newest) Note that a channel's username (if it doesn't include spaces) is also valid in place of ucid , e.g. /api/v1/channels/BlenderFoundation .","title":"GET /api/v1/channels/:ucid"},{"location":"API/#get-apiv1channelsucidvideos-apiv1channelsvideosucid","text":"Schema: [ { title: String, videoId: String, author: String, authorId: String, authorUrl: String, videoThumbnails: [ { quality: String, url: String, width: Int32, height: Int32 } ], description: String, descriptionHtml: String, viewCount: Int64, published: Int64, publishedText: String, lengthSeconds: Int32 paid: Bool, premium: Bool } ] Parameters: page: Int32 sort_by: \"newest\", \"oldest\", \"popular\" (default: newest)","title":"GET /api/v1/channels/:ucid/videos, /api/v1/channels/videos/:ucid"},{"location":"API/#get-apiv1channelsucidlatest-apiv1channelslatestucid","text":"[ { title: String, videoId: String, authorId: String, authorUrl: String, videoThumbnails: [ { quality: String, url: String, width: Int32, height: Int32 } ], description: String, descriptionHtml: String, viewCount: Int64, published: Int64, publishedText: String, lengthSeconds: Int32 paid: Bool, premium: Bool } ]","title":"GET /api/v1/channels/:ucid/latest, /api/v1/channels/latest/:ucid"},{"location":"API/#get-apiv1channelsplaylistsucid-apiv1channelsucidplaylists","text":"{ \"playlists\": [ { \"title\": String, \"playlistId\": String, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"videoCount\": Int32, \"videos\": [ { \"title\": String, \"videoId\": String, \"lengthSeconds\": Int32, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ] } ] ], \"continuation\": String? } Parameters: continuation: String sort_by: \"oldest\", \"newest\", \"last\"","title":"GET /api/v1/channels/playlists/:ucid, /api/v1/channels/:ucid/playlists"},{"location":"API/#get-apiv1channelscommentsucid-apiv1channelsucidcomments","text":"{ \"authorId\": String, \"comments\": [ { \"author\": String, \"authorThumbnails\": [ \"url\": String, \"width\": Int32, \"height\": Int32 ], \"authorId\": String, \"authorUrl\": String, \"isEdited\": Bool, \"content\": String, \"contentHtml\": String, \"published\": Int64, \"publishedText\": String, \"likeCount\": Int32, \"commentId\": String, \"authorIsChannelOwner\": Bool, \"creatorHeart\": { \"creatorThumbnail\": String, \"creatorName\": String }?, \"replies\": { \"replyCount\": Int32, \"continuation\": String }?, \"attachment\": Attachment? } ], \"continuation\": String? } The authorId for top-level comments will always(?) be the same as the requested channel. Top-level comments will also have an optional attachment , which can be one of: { \"type\": \"image\", \"imageThumbnails\": [ { \"url\": String, \"width\": Int32, \"height\": Int32 } ] } { \"type\": \"video\", \"title\": String, \"videoId\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"lengthSeconds\": Int32, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"published\": Int64, \"publishedText\": String, \"viewCount\": Int64, \"viewCountText\": String } { \"type\": \"unknown\", \"error\": \"Unrecognized attachment type.\" } Some attachments may only have a type and error , similar to the above. Attachments will only be present on top-level comments. Parameters: continuation: String","title":"GET /api/v1/channels/comments/:ucid, /api/v1/channels/:ucid/comments"},{"location":"API/#get-apiv1channelssearchucid","text":"Schema: [ { type: \"video\", title: String, videoId: String, author: String, authorId: String, authorUrl: String, videoThumbnails: [ { quality: String, url: String, width: Int32, height: Int32 } ], description: String, descriptionHtml: String, viewCount: Int64, published: Int64, publishedText: String, lengthSeconds: Int32, liveNow: Bool, paid: Bool, premium: Bool }, { type: \"playlist\", title: String, playlistId: String, author: String, authorId: String, authorUrl: String, videoCount: Int32, videos: [ { title: String, videoId: String, lengthSeconds: Int32, videoThumbnails: [ { quality: String, url: String, width: Int32, height: Int32 } ] } ] }, { type: \"channel\", author: String, authorId: String, authorUrl: String, authorThumbnails: [ { url: String, width: Int32, height: Int32 } ], subCount: Int32, videoCount: Int32, description: String, descriptionHtml: String } ]; Parameters: q: String page: Int32","title":"GET /api/v1/channels/search/:ucid"},{"location":"API/#get-apiv1searchsuggestions","text":"Schema: { \"query\": String, \"suggestions\": Array(String) } Parameters: q: String","title":"GET /api/v1/search/suggestions"},{"location":"API/#get-apiv1search","text":"Schema: [ { type: \"video\", title: String, videoId: String, author: String, authorId: String, authorUrl: String, videoThumbnails: [ { quality: String, url: String, width: Int32, height: Int32 } ], description: String, descriptionHtml: String, viewCount: Int64, published: Int64, publishedText: String, lengthSeconds: Int32, liveNow: Bool, paid: Bool, premium: Bool }, { type: \"playlist\", title: String, playlistId: String, author: String, authorId: String, authorUrl: String, videoCount: Int32, videos: [ { title: String, videoId: String, lengthSeconds: Int32, videoThumbnails: [ { quality: String, url: String, width: Int32, height: Int32 } ] } ] }, { type: \"channel\", author: String, authorId: String, authorUrl: String, authorThumbnails: [ { url: String, width: Int32, height: Int32 } ], subCount: Int32, videoCount: Int32, description: String, descriptionHtml: String } ]; Parameters: q: String page: Int32 sort_by: \"relevance\", \"rating\", \"upload_date\", \"view_count\" date: \"hour\", \"today\", \"week\", \"month\", \"year\" duration: \"short\", \"long\" type: \"video\", \"playlist\", \"channel\", \"all\", (default: video) features: \"hd\", \"subtitles\", \"creative_commons\", \"3d\", \"live\", \"purchased\", \"4k\", \"360\", \"location\", \"hdr\" (comma separated: e.g. \"&features=hd,subtitles,3d,live\") region: ISO 3166 country code (default: \"US\")","title":"GET /api/v1/search"},{"location":"API/#get-apiv1playlistsplid","text":"Schema: { \"title\": String, \"playlistId\": String, \"author\": String, \"authorId\": String, \"authorThumbnails\": [ { \"url\": String, \"width\": String, \"height\": String } ], \"description\": String, \"descriptionHtml\": String, \"videoCount\": Int32, \"viewCount\": Int64, \"updated\": Int64, \"videos\": [ { \"title\": String, \"videoId\": String, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"index\": Int32, \"lengthSeconds\": Int32 } ] } Parameters: page: Int32","title":"GET /api/v1/playlists/:plid"},{"location":"API/#get-apiv1mixesrdid","text":"Schema: { title: String, mixId: String, videos: [ { title: String, videoId: String, author: String, authorId: String, authorUrl: String, videoThumbnails: [ { quality: String, url: String, width: Int32, height: Int32 } ], index: Int32, lengthSeconds: Int32 } ] }","title":"GET /api/v1/mixes/:rdid"},{"location":"Always-use-%22local%22-to-proxy-video-through-the-server-without-creating-an-account/","tags":null,"text":"Download ViolentMonkey for your Browser: Firefox Chrome and Chromium Others Than add the following script in ViolentMonkey. It will always add &local=true to the end of the video URL. // ==UserScript== // @name Invidious Proxy automatically // @match *://*.redirect.invidious.io/watch?v=* // @run-at document-start // @grant none // ==/UserScript== if (!(/[?&]local=/).test(location.search) && !(/[?&]quality=dash/).test(location.search)) { location.search += (location.search ? \"&\" : \"?\") + \"local=true\"; } You can also enable this by checking Proxy videos? in your preferences.","title":"Always-use-\"local\"-to-proxy-video-through-the-server-without-creating-an-account"},{"location":"Apache2-Reverse-Proxy/","tags":null,"text":"A very basic config, secured with Let's Encrypt. Any log is disabled by default. Do not forget to replace ServerName with your domain. <IfModule mod_ssl.c> <VirtualHost *:443> ServerName invidious.domain.tld ServerAdmin admin@localhost ProxyPreserveHost On ProxyRequests off ProxyPass / http://127.0.0.1:3000/ ProxyPassReverse / http://127.0.0.1:3000/ # ErrorLog /var/log/apache2/invidious.domain.tld/error.log CustomLog /dev/null combined RewriteEngine on SSLCertificateFile /etc/letsencrypt/live/invidious.domain.tld/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/invidious.domain.tld/privkey.pem SSLCertificateChainFile /etc/letsencrypt/live/invidious.domain.tld/chain.pem </VirtualHost> </IfModule> Another config example without HTTPS, but with Apache Basic Auth HTTP login. The user will connect to Apache on port 3333 and will be asked to log in. If authentification is successful, Apache will redirect the user to Invidious' page. To make the VirtualHost config below actually work, you should as well: Create a .htpasswd file and add required username/login combos to it, if not already existing. Open port 3333 (or any other free port) adding Listen 3333 to Apache ports.conf (Debian /etc/apache2/ports.conf ) If you run Invidious with default parameters, you may need to replace default host binding (0.0.0.0) with localhost (127.0.0.1) instead. That way, Invidious won't be publicly available on port 3000 anymore, but only accessible via the reverse proxy on port 3333. So if you run Invidious via a systemd service, you would edit the service file (e.g. /etc/systemd/system/invidious.service ) and modify the ExecStart line to include the -b switch as follows ExecStart=/home/invidious/invidious/invidious -b 127.0.0.1 -o invidious.log and then reload the daemon with systemctl daemon-reload so that changes are taken into account. A convenient way to open such protected Invidious page without having to log in manually everytime is to access use a URL with the following format: http://username:password@domain:3333 <VirtualHost *:3333> ServerName invidious.domain.tld #add your own domain name (or localhost if you have none) ServerAdmin admin@localhost <Location /> Deny from all # Forbid access to all by default... #Allow from 127.0.0.1 #...Except from specific IPs (which will not need to authenticate)... AuthUserFile /etc/apache2/.htpasswd #path to .htpasswd file AuthName \"Restricted Area\" # name displayed in the promptbox AuthType Basic # http://httpd.apache.org/docs/current/howto/auth.html Satisfy Any Require valid-user # ...and except from authenticated users included in the .htpasswd file </Location> ProxyPass / http://127.0.0.1:3000/ nocanon ProxyPassReverse / http://127.0.0.1:3000/ ProxyPreserveHost On ProxyRequests Off AllowEncodedSlashes On #ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog /dev/null combined </VirtualHost>","title":"Apache2-Reverse-Proxy"},{"location":"Apache2-reverse-proxy/","tags":null,"text":"This is the barebones SSL and non-SSL configs for Apache 2.2 and up. You will need to use Let's Encrypt to generate a certificate. Replace your-domain with your website. Logs are not recorded by default. <VirtualHost *:80> ServerAdmin webmaster@localhost ServerAlias your-domain ProxyPass / http://0.0.0.0:3000/ ProxyPassReverse / http://0.0.0.0:3000/ RemoteIPHeader CF-Connecting-IP ErrorLog /dev/null CustomLog /dev/null RewriteEngine on RewriteCond %{SERVER_NAME} =your-domain RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent] </VirtualHost> <VirtualHost *:443> ServerAdmin webmaster@localhost ServerAlias your-domain ErrorDocument 503 \"Invidious is unavailable at this time.\" ProxyPass / http://0.0.0.0:3000/ ProxyPassReverse / http://0.0.0.0:3000/ ErrorLog /dev/null CustomLog /dev/null #RemoteIPHeader CF-Connecting-IP Include /etc/letsencrypt/options-ssl-apache.conf ServerName your-domain SSLCertificateFile /etc/letsencrypt/live/your-domain/fullchain.pem SSLCertificateKeyFile /etc/letsencrypt/live/your-domain/privkey.pem </VirtualHost> </IfModule>","title":"Apache2-reverse-proxy"},{"location":"Authenticated-Endpoints/","tags":null,"text":"All endpoints under namespace /api/v1/auth require authentication. Authentication can be in one of two forms: A Cookie: <SID> header (for logged in users) An Authentication: Bearer <TOKEN> (recommended) A new token can be generated from /authorize_token with the given parameters: scopes: Comma-separated list of scopes callback_url: URL to redirect to with generated token expire: Int64 how long a given token should be valid (in seconds) Each scope has the following format: METHOD1;METHOD2...:ENDPOINT(*)? Where METHOD can be one of GET , POST , PUT , DELETE , PATCH . An ENDPOINT can be any of the documented endpoints below. Examples: POST:playlists* : authorizes POST methods to any endpoint under /api/v1/auth/playlists ( /api/v1/auth/playlists , /api/v1/playlists/:id/videos , etc.) :playlists/* : authorizes any method to endpoints under /api/v1/auth/playlists/ ( /api/v1/auth/playlists/:id , /api/v1/playlists/:id/videos , etc.) GET:playlists/IVPAAAAAAA : authorizes GET only to playlist IVPAAAAAAA . :preferences : authorizes any method to /api/v1/auth/preferences GET;POST:preferences : authorizes GET or POST to /api/v1/auth/preferences When a callback_url is specified, after a user has authorized a token with the desired scopes , a GET request will be made to the callback_url with the token URL-escaped and appended as token=TOKEN . GET /api/v1/auth/feed Get subscription feed for the authenticated user. Parameters: max_results: Int32 page: Int32 Schema: { \"notifications\": [ { \"type\": \"shortVideo\", \"title\": String, \"videoId\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int64, \"height\": Int64 } ], \"lengthSeconds\": Int64, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"published\": Int64, \"publishedText\": String, \"viewCount\": Int64 } ], \"videos\": [ { \"type\": \"shortVideo\", \"title\": String, \"videoId\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int64, \"height\": Int64 } ], \"lengthSeconds\": Int64, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"published\": Int64, \"publishedText\": String, \"viewCount\": Int64 } ] } GET /api/v1/auth/notifications Parameters: topics: Array(String) (comma separated: e.g. \"UCID1,UCID2) limit of 1000 topics since: Int64, timestamp Provides an EventSource for receiving changes from each topic in topics . Currently the only supported topic-type is ucid , which will return an updated video object whenever the given channel uploads a video. Important to note is that an event will also be sent when a channel changes an already uploaded video, for example changing description or title. Each event is a JSON object with the same schema as /api/v1/videos . The fields API can be used, which will be applied to each object. A debug topic can also provided which will return a (psuedo-)randomly selected video every minute. since will return all videos uploaded since TIMESTAMP , with a limit of the 15 most recent videos from each topic. More details in #469 . POST /api/v1/auth/notifications Same as above GET endpoint, however topics is moved into post body as Content-Type: application/x-www-form-urlencoded . GET /api/v1/auth/playlists Get list of playlists for the given user. Schema: [ { \"type\": \"invidiousPlaylist\", \"title\": String, \"playlistId\": String, \"author\": String, \"authorId\": null, \"authorUrl\": null, \"authorThumbnails\": [], \"description\": String, \"descriptionHtml\": String, \"videoCount\": Int32, \"viewCount\": 0, \"updated\": Int64, \"isListed\": Boolean, \"videos\": [ { \"title\": String, \"videoId\": String, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"index\": Int32, \"indexId\": String, \"lengthSeconds\": Int32 } ] } ] POST /api/v1/auth/playlists Content-Type: application/json Create new playlist. Example request body: { \"title\": String, \"privacy\": \"private\" } privacy can be any of: public , unlisted , private If successful, returns 201, a link to the created resource as a Location header, and the following response: { \"title\": String, \"playlistId\": String } GET /api/v1/auth/playlists/:id Returns same result as unauthenticated /api/v1/playlists/:id . Important to note is that if the requested playlist is marked as private , it will return an error if the request is not authenticated as the playlist's author. PATCH /api/v1/auth/playlists/:id Content-Type: application/json Modify a playlist's description , title , description , or privacy . Example request body: { \"title\": String, \"description\": String, \"privacy\": \"private\" } privacy can be any of: public , unlisted , private Will return 204 on success. DELETE /api/v1/auth/playlists/:id Delete a given playlist :id . Will return 204 on success. POST /api/v1/auth/playlists/:id/videos Content-Type: application/json Add a video to the given playlist :id . Example request body: { \"videoId\": String } Returns a 201 on success with the following schema: { \"title\": String, \"videoId\": String, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ] } DELETE /api/v1/auth/playlists/:id/videos/:index Delete a video from the given playlist :id with indexId :index . Will return 204 on success. GET /api/v1/auth/preferences Get preferences for authenticated user. Schema: { \"annotations\": false, \"annotations_subscribed\": false, \"autoplay\": false, \"captions\": [ \"\", \"\", \"\" ], \"comments\": [ \"youtube\", \"\" ], \"continue\": false, \"continue_autoplay\": true, \"dark_mode\": \"light\", \"latest_only\": false, \"listen\": false, \"local\": false, \"locale\": \"en-US\", \"max_results\": 40, \"notifications_only\": false, \"player_style\": \"invidious\", \"quality\": \"hd720\", \"default_home\": \"Popular\", \"feed_menu\": [ \"Trending\", \"Playlists\" ], \"related_videos\": true, \"sort\": \"published\", \"speed\": 1.0, \"thin_mode\": false, \"unseen_only\": false, \"video_loop\": false, \"volume\": 100 } POST /api/v1/auth/preferences Content-Type: application/json Patch user preferences. Example body: { \"speed\": 2.0, \"volume\": 10 } GET /api/v1/auth/subscriptions Get user's subscriptions. Schema: [ { \"author\": String, \"authorId\": String } ] POST /api/v1/auth/subscriptions/:ucid Content-Type: application/json Add a given ucid to a user's subscriptions. Will return 204 on success. DELETE /api/v1/auth/subscriptions/:ucid Removes a given ucid from a user's subscriptions. Will return 204 on success. GET /api/v1/auth/tokens Get a list of tokens for the authenticated user. Schema: [ { \"session\": String, \"issued\": Int64 } ] POST /api/v1/auth/tokens/register Content-Type: application/json Create a new token for the authenticated user. Example request body: { \"scopes\": Array(String), // Each scope has same format as each scope in `/authorize_token` \"callbackUrl\": String?, \"expire\": Int64 } Returns a 200 on success with the newly created token as the response body. Example response: { \"session\":\"v1:YUwKEL1XwHQzp7-AAAAAAAAAAAAAAAAAA=\", \"scopes\":[\"GET:notifications\"], \"signature\":\"jNYdAAAAAAAAAAAAAAAAAAAAAAAAAAAAVAXGb__2Gv-w=\" } POST /api/v1/auth/tokens/unregister Content-Type: application/json Revoke a token for the authenticated user. Example request: { \"session\": \"v1:YUwKEL1XwHQzp7-AAAAAAAAAAAAAAAAAA=\" } Returns 204 on success.","title":"Authenticated-Endpoints"},{"location":"Authenticated-Endpoints/#get-apiv1authfeed","text":"Get subscription feed for the authenticated user. Parameters: max_results: Int32 page: Int32 Schema: { \"notifications\": [ { \"type\": \"shortVideo\", \"title\": String, \"videoId\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int64, \"height\": Int64 } ], \"lengthSeconds\": Int64, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"published\": Int64, \"publishedText\": String, \"viewCount\": Int64 } ], \"videos\": [ { \"type\": \"shortVideo\", \"title\": String, \"videoId\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int64, \"height\": Int64 } ], \"lengthSeconds\": Int64, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"published\": Int64, \"publishedText\": String, \"viewCount\": Int64 } ] }","title":"GET /api/v1/auth/feed"},{"location":"Authenticated-Endpoints/#get-apiv1authnotifications","text":"Parameters: topics: Array(String) (comma separated: e.g. \"UCID1,UCID2) limit of 1000 topics since: Int64, timestamp Provides an EventSource for receiving changes from each topic in topics . Currently the only supported topic-type is ucid , which will return an updated video object whenever the given channel uploads a video. Important to note is that an event will also be sent when a channel changes an already uploaded video, for example changing description or title. Each event is a JSON object with the same schema as /api/v1/videos . The fields API can be used, which will be applied to each object. A debug topic can also provided which will return a (psuedo-)randomly selected video every minute. since will return all videos uploaded since TIMESTAMP , with a limit of the 15 most recent videos from each topic. More details in #469 .","title":"GET /api/v1/auth/notifications"},{"location":"Authenticated-Endpoints/#post-apiv1authnotifications","text":"Same as above GET endpoint, however topics is moved into post body as Content-Type: application/x-www-form-urlencoded .","title":"POST /api/v1/auth/notifications"},{"location":"Authenticated-Endpoints/#get-apiv1authplaylists","text":"Get list of playlists for the given user. Schema: [ { \"type\": \"invidiousPlaylist\", \"title\": String, \"playlistId\": String, \"author\": String, \"authorId\": null, \"authorUrl\": null, \"authorThumbnails\": [], \"description\": String, \"descriptionHtml\": String, \"videoCount\": Int32, \"viewCount\": 0, \"updated\": Int64, \"isListed\": Boolean, \"videos\": [ { \"title\": String, \"videoId\": String, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ], \"index\": Int32, \"indexId\": String, \"lengthSeconds\": Int32 } ] } ]","title":"GET /api/v1/auth/playlists"},{"location":"Authenticated-Endpoints/#post-apiv1authplaylists","text":"Content-Type: application/json Create new playlist. Example request body: { \"title\": String, \"privacy\": \"private\" } privacy can be any of: public , unlisted , private If successful, returns 201, a link to the created resource as a Location header, and the following response: { \"title\": String, \"playlistId\": String }","title":"POST /api/v1/auth/playlists"},{"location":"Authenticated-Endpoints/#get-apiv1authplaylistsid","text":"Returns same result as unauthenticated /api/v1/playlists/:id . Important to note is that if the requested playlist is marked as private , it will return an error if the request is not authenticated as the playlist's author.","title":"GET /api/v1/auth/playlists/:id"},{"location":"Authenticated-Endpoints/#patch-apiv1authplaylistsid","text":"Content-Type: application/json Modify a playlist's description , title , description , or privacy . Example request body: { \"title\": String, \"description\": String, \"privacy\": \"private\" } privacy can be any of: public , unlisted , private Will return 204 on success.","title":"PATCH /api/v1/auth/playlists/:id"},{"location":"Authenticated-Endpoints/#delete-apiv1authplaylistsid","text":"Delete a given playlist :id . Will return 204 on success.","title":"DELETE /api/v1/auth/playlists/:id"},{"location":"Authenticated-Endpoints/#post-apiv1authplaylistsidvideos","text":"Content-Type: application/json Add a video to the given playlist :id . Example request body: { \"videoId\": String } Returns a 201 on success with the following schema: { \"title\": String, \"videoId\": String, \"author\": String, \"authorId\": String, \"authorUrl\": String, \"videoThumbnails\": [ { \"quality\": String, \"url\": String, \"width\": Int32, \"height\": Int32 } ] }","title":"POST /api/v1/auth/playlists/:id/videos"},{"location":"Authenticated-Endpoints/#delete-apiv1authplaylistsidvideosindex","text":"Delete a video from the given playlist :id with indexId :index . Will return 204 on success.","title":"DELETE /api/v1/auth/playlists/:id/videos/:index"},{"location":"Authenticated-Endpoints/#get-apiv1authpreferences","text":"Get preferences for authenticated user. Schema: { \"annotations\": false, \"annotations_subscribed\": false, \"autoplay\": false, \"captions\": [ \"\", \"\", \"\" ], \"comments\": [ \"youtube\", \"\" ], \"continue\": false, \"continue_autoplay\": true, \"dark_mode\": \"light\", \"latest_only\": false, \"listen\": false, \"local\": false, \"locale\": \"en-US\", \"max_results\": 40, \"notifications_only\": false, \"player_style\": \"invidious\", \"quality\": \"hd720\", \"default_home\": \"Popular\", \"feed_menu\": [ \"Trending\", \"Playlists\" ], \"related_videos\": true, \"sort\": \"published\", \"speed\": 1.0, \"thin_mode\": false, \"unseen_only\": false, \"video_loop\": false, \"volume\": 100 }","title":"GET /api/v1/auth/preferences"},{"location":"Authenticated-Endpoints/#post-apiv1authpreferences","text":"Content-Type: application/json Patch user preferences. Example body: { \"speed\": 2.0, \"volume\": 10 }","title":"POST /api/v1/auth/preferences"},{"location":"Authenticated-Endpoints/#get-apiv1authsubscriptions","text":"Get user's subscriptions. Schema: [ { \"author\": String, \"authorId\": String } ]","title":"GET /api/v1/auth/subscriptions"},{"location":"Authenticated-Endpoints/#post-apiv1authsubscriptionsucid","text":"Content-Type: application/json Add a given ucid to a user's subscriptions. Will return 204 on success.","title":"POST /api/v1/auth/subscriptions/:ucid"},{"location":"Authenticated-Endpoints/#delete-apiv1authsubscriptionsucid","text":"Removes a given ucid from a user's subscriptions. Will return 204 on success.","title":"DELETE /api/v1/auth/subscriptions/:ucid"},{"location":"Authenticated-Endpoints/#get-apiv1authtokens","text":"Get a list of tokens for the authenticated user. Schema: [ { \"session\": String, \"issued\": Int64 } ]","title":"GET /api/v1/auth/tokens"},{"location":"Authenticated-Endpoints/#post-apiv1authtokensregister","text":"Content-Type: application/json Create a new token for the authenticated user. Example request body: { \"scopes\": Array(String), // Each scope has same format as each scope in `/authorize_token` \"callbackUrl\": String?, \"expire\": Int64 } Returns a 200 on success with the newly created token as the response body. Example response: { \"session\":\"v1:YUwKEL1XwHQzp7-AAAAAAAAAAAAAAAAAA=\", \"scopes\":[\"GET:notifications\"], \"signature\":\"jNYdAAAAAAAAAAAAAAAAAAAAAAAAAAAAVAXGb__2Gv-w=\" }","title":"POST /api/v1/auth/tokens/register"},{"location":"Authenticated-Endpoints/#post-apiv1authtokensunregister","text":"Content-Type: application/json Revoke a token for the authenticated user. Example request: { \"session\": \"v1:YUwKEL1XwHQzp7-AAAAAAAAAAAAAAAAAA=\" } Returns 204 on success.","title":"POST /api/v1/auth/tokens/unregister"},{"location":"Configuration/","tags":null,"text":"What can be configured and what are these configuration options? The configuration file is located at invidious/config/config.yml . channel_threads (default 1 ) Number of threads to use for crawling videos from channels feed_threads (default 1 ) Number of threads to use for refreshing subscription feeds db: user: kemal # your database user password: kemal # your database password host: localhost # database host port: 5432 # postgres port full_refresh (default false ) When crawling channel videos, threads should refresh all videos uploaded by a channel https_only (default false ) Used to tell Invidious it is accessed via https, set to true if you have for example a reverse proxy with a ssl certificate hmac_key (default nil ) Signing key for CSRF tokens (when nil is randomly generated on startup, can be any random string) domain (default nil ) Domain to use for providing self links in RSS feeds, issuing cookies, etc. use_pubsub_feeds (default false ) Use server-side notifications provided by YouTube . Requires domain and hmac_key to be set default_home (default \"Popular\" ) Default home page Moved into default_user_preferences feed_menu (default [\"Popular\", \"Trending\", \"Subscriptions\"] ) Order of tabs on feed menu Moved into default_user_preferences captcha_enabled (default true ) Determine if CAPTCHA should be required for registration login_enabled (default true ) Whether users should be able to login registration_enabled (default true ) Whether new users should be able to register statistics_enabled (default false ) Whether statistics should be available from /api/v1/stats admins (default [] ) List of user IDs that have access to administrator preferences external_port (default nil ) Invidious should supply links to a different port (if running behind a proxy, for example). PubSub notifications (if enabled) will also be sent to this port default_user_preferences (default ConfigPreferences ) Default preferences to use for new and unregistered users, see #415 dmca_content (default [] ) For compliance with DMCA requests, disables download widget for list of video IDs check_tables (default false ) Check table integrity, automatically try to add any missing columns, create columns, etc. cache_annotations (default false ) Cache annotations requested from IA, will not cache empty annotations or annotations that only contain cards banner (default nil ) Optional banner to be displayed along top of page for announcements, etc. hsts (default true ) For HTTP Strict Transport Security disable_proxy (default false ) Disable proxy option serverwide (options: 'dash', 'livestreams', 'downloads', 'local') force_resolve (default nil ) Force IPv4 or IPv6 connection to Google (options: 'ipv4', 'ipv6') see #811 pool_size (default 100 ) Pool size for HTTP connections for youtube.com and ytimg.com (each domain has a separate pool of pool_size ) admin_email (default omarroth@protonmail.com ) Email provided to users for bug reports port (default 3000 ) Default port for HTTP server host_binding (default 0.0.0.0 ) Default host for HTTP server cookies (default nil ) Cookies to be used when connecting to YouTube captcha_key (default nil ) Anti-Captcha API key for solving YouTube CAPTCHAs, see #886 . popular_enabled (default false ) Whether to display popular videos of the instance.","title":"Configuration"},{"location":"Configuration/#what-can-be-configured-and-what-are-these-configuration-options","text":"The configuration file is located at invidious/config/config.yml . channel_threads (default 1 ) Number of threads to use for crawling videos from channels feed_threads (default 1 ) Number of threads to use for refreshing subscription feeds db: user: kemal # your database user password: kemal # your database password host: localhost # database host port: 5432 # postgres port full_refresh (default false ) When crawling channel videos, threads should refresh all videos uploaded by a channel https_only (default false ) Used to tell Invidious it is accessed via https, set to true if you have for example a reverse proxy with a ssl certificate hmac_key (default nil ) Signing key for CSRF tokens (when nil is randomly generated on startup, can be any random string) domain (default nil ) Domain to use for providing self links in RSS feeds, issuing cookies, etc. use_pubsub_feeds (default false ) Use server-side notifications provided by YouTube . Requires domain and hmac_key to be set default_home (default \"Popular\" ) Default home page Moved into default_user_preferences feed_menu (default [\"Popular\", \"Trending\", \"Subscriptions\"] ) Order of tabs on feed menu Moved into default_user_preferences captcha_enabled (default true ) Determine if CAPTCHA should be required for registration login_enabled (default true ) Whether users should be able to login registration_enabled (default true ) Whether new users should be able to register statistics_enabled (default false ) Whether statistics should be available from /api/v1/stats admins (default [] ) List of user IDs that have access to administrator preferences external_port (default nil ) Invidious should supply links to a different port (if running behind a proxy, for example). PubSub notifications (if enabled) will also be sent to this port default_user_preferences (default ConfigPreferences ) Default preferences to use for new and unregistered users, see #415 dmca_content (default [] ) For compliance with DMCA requests, disables download widget for list of video IDs check_tables (default false ) Check table integrity, automatically try to add any missing columns, create columns, etc. cache_annotations (default false ) Cache annotations requested from IA, will not cache empty annotations or annotations that only contain cards banner (default nil ) Optional banner to be displayed along top of page for announcements, etc. hsts (default true ) For HTTP Strict Transport Security disable_proxy (default false ) Disable proxy option serverwide (options: 'dash', 'livestreams', 'downloads', 'local') force_resolve (default nil ) Force IPv4 or IPv6 connection to Google (options: 'ipv4', 'ipv6') see #811 pool_size (default 100 ) Pool size for HTTP connections for youtube.com and ytimg.com (each domain has a separate pool of pool_size ) admin_email (default omarroth@protonmail.com ) Email provided to users for bug reports port (default 3000 ) Default port for HTTP server host_binding (default 0.0.0.0 ) Default host for HTTP server cookies (default nil ) Cookies to be used when connecting to YouTube captcha_key (default nil ) Anti-Captcha API key for solving YouTube CAPTCHAs, see #886 . popular_enabled (default false ) Whether to display popular videos of the instance.","title":"What can be configured and what are these configuration options?"},{"location":"Database-Information-and-Maintenance/","tags":null,"text":"Invidious needs one PostgreSQL database which has the following tables. annotations Caches annotation data if cache_annotations is enabled in config.yml channel_videos Stores truncated video info, used to create user feeds channels Stores UCID and author name nonces Keeps track of tokens issued to prevent CSRF users Stores user info, such as preferences, username, subscriptions session_ids Keeps track of user sessions videos Stores video cache, used to create \"top\" page The table videos grows a lot and needs the most storage. You can clean it up using following commands: $ sudo -i -u postgres $ psql invidious -c \"DELETE FROM nonces * WHERE expire < current_timestamp\" $ psql invidious -c \"TRUNCATE TABLE videos\" $ exit For regular maintenance you should add a cronjob for these commands @weekly psql invidious -c \"DELETE FROM nonces * WHERE expire < current_timestamp\" > /dev/null @weekly psql invidious -c \"TRUNCATE TABLE videos\" > /dev/null","title":"Database-Information-and-Maintenance"},{"location":"Export-YouTube-subscriptions/","tags":null,"text":"The steps below as well as the resulting file name are different depending on your Google language settings. Open Google Takeout . Under Create a new export choose YouTube and YouTube Music . Click on All YouTube data included and only tick subscriptions in the dialog that opens. Click on Next step , make sure Export once is chosen and click on Create export . Wait until the export creation is finished, then on the same page click on Download under Your latest export that should now be visible. Extract the downloaded archive and find the file subscriptions.csv . While logged into your Invidious account go to Subscriptions -> Manage Subscriptions -> Import/Export -> Import YouTube subscriptions, select the file you just downloaded and click on Import .","title":"Export-YouTube-subscriptions"},{"location":"Extensions/","tags":null,"text":"Browser extensions for Invidious Privacy Redirect : Redirects YouTube to Invidious, Twitter to Nitter, and Instagram to Bibliogram. Source / Firefox / Chrome Alter : Firefox extension that redirects YouTube, Twitter and Reddit to Invidious, Nitter and Teddit respectively. Source / Firefox SponsorBlock : A crowd-sourced extension to skip sponsorships. Support invidious instances if enabled in the options. Source / Firefox / Chrome Invidition : Firefox extension that redirects YouTube links and embeds to their Invidious counterpart without any call to YouTube. Source ( deprecated ). Alternate Tube Redirector : Extension to automatically open YouTube Videos on alternate sites like Invidious or Hooktube. Source Invidious Copy URL : Adds context menu options on Invidious to copy shortened YouTube URL at current time or not (Requires using developer mode in Chrome or a developer version of Firefox). View on Invidious : View page on Invidious (bookmarklet). Inviduration : Firefox extension that shows total duration of playlists on Invidious. Source / Firefox Userscripts for Invidious. Invidious Redirect : Redirects YouTube URLs to Invidio.us. YouTube to Invidious : Scans current page for YouTube embeds and replace with Invidious. No-Youtube : Userscript to replace youtube links to invidio.us. Invidious Audio Mode : Adds a headphone icon next to all video links. Handy for those that just want to stream audio and not video. FYTE : Replace all YouTube embeds on a page with the video's thumbnail. Click on the thumbnail to play the video. Invidious is supported in the Options panel. Extensions that integrate Invidious into other programs and apps UntrackMe : Android app to rewrite YouTube links to Invidious. Can optionally play videos in the app as well. iPhone Redirector Shortcut : Automatically open YouTube videos in Invidious (iPhone shortcut). FreshRSS Extension : A FreshRSS extension to directly embed videos from Invidious channel feeds. Kodi add-on : Watch YouTube videos in the Kodi media center, using the Invidious API. Privacy-friendly alternative to the YouTube API add-on. Another Kodi add-on : Seems to have been more recently updated than the above. Utilities for Invidious Invidious-Updater (And Installer) : Automatic install and update script for Invidious.","title":"Extensions"},{"location":"Extensions/#browser-extensions-for-invidious","text":"Privacy Redirect : Redirects YouTube to Invidious, Twitter to Nitter, and Instagram to Bibliogram. Source / Firefox / Chrome Alter : Firefox extension that redirects YouTube, Twitter and Reddit to Invidious, Nitter and Teddit respectively. Source / Firefox SponsorBlock : A crowd-sourced extension to skip sponsorships. Support invidious instances if enabled in the options. Source / Firefox / Chrome Invidition : Firefox extension that redirects YouTube links and embeds to their Invidious counterpart without any call to YouTube. Source ( deprecated ). Alternate Tube Redirector : Extension to automatically open YouTube Videos on alternate sites like Invidious or Hooktube. Source Invidious Copy URL : Adds context menu options on Invidious to copy shortened YouTube URL at current time or not (Requires using developer mode in Chrome or a developer version of Firefox). View on Invidious : View page on Invidious (bookmarklet). Inviduration : Firefox extension that shows total duration of playlists on Invidious. Source / Firefox","title":"Browser extensions for Invidious"},{"location":"Extensions/#userscripts-for-invidious","text":"Invidious Redirect : Redirects YouTube URLs to Invidio.us. YouTube to Invidious : Scans current page for YouTube embeds and replace with Invidious. No-Youtube : Userscript to replace youtube links to invidio.us. Invidious Audio Mode : Adds a headphone icon next to all video links. Handy for those that just want to stream audio and not video. FYTE : Replace all YouTube embeds on a page with the video's thumbnail. Click on the thumbnail to play the video. Invidious is supported in the Options panel.","title":"Userscripts for Invidious."},{"location":"Extensions/#extensions-that-integrate-invidious-into-other-programs-and-apps","text":"UntrackMe : Android app to rewrite YouTube links to Invidious. Can optionally play videos in the app as well. iPhone Redirector Shortcut : Automatically open YouTube videos in Invidious (iPhone shortcut). FreshRSS Extension : A FreshRSS extension to directly embed videos from Invidious channel feeds. Kodi add-on : Watch YouTube videos in the Kodi media center, using the Invidious API. Privacy-friendly alternative to the YouTube API add-on. Another Kodi add-on : Seems to have been more recently updated than the above.","title":"Extensions that integrate Invidious into other programs and apps"},{"location":"Extensions/#utilities-for-invidious","text":"Invidious-Updater (And Installer) : Automatic install and update script for Invidious.","title":"Utilities for Invidious"},{"location":"FAQ/","text":"Frequently Asked Questions Table of Contents Using Invidious Can I use Invidious on my device? Do you plan to make an Android/iOS app? What data is collected by Invidious? What data is shared with YouTube? Commonly encountered errors The media could not be loaded\u2026 Could not check out a connection in 2.0 seconds (DB::PoolTimeout) Running your own instance Do you provide pre-built binaries ( .deb , .rpm , etc..)? How can I configure [thing] ? RSS feeds/links/etc... URLs redirect to <IP>:3000 but I have a reverse proxy! The \"popular\" feed/page on my instance is empty! Using Invidious Q: Can I use Invidious on my device? A: As long as your device is equipped with a modern web browser, sure, of course! A responsive interface is available for mobile/tablets. Q: Do you plan to make an Android/iOS app? A: No. Invidious is and will always be a browser application. If you have an Android phone/tablet, you can check the NewPipe application. Q: What data is collected by Invidious? A: Invidious by itself does not collect any data about its users, but keep in mind that instance owners can log your IP address (like any other server on the internet). By default, the server logs which URLs were accessed, the associated error code (e.g 404 if the URL was not found) and the time it took for the server to respond. Here is what the server logs look like: 2021-08-30 18:15:44 UTC [info] 200 GET /watch?v=GIAKHj9uJtM 781.21ms 2021-08-30 18:15:49 UTC [info] 200 GET /api/v1/search?q=Fly%20away 500.0ms 2021-08-30 18:15:49 UTC [info] 200 GET /vi/lJcqAzWFWLs/mqdefault.jpg 15.82ms 2021-08-30 18:15:49 UTC [info] 200 GET /vi/JoP_Tte7z7o/mqdefault.jpg 70.64ms When you create an account, your watch history and the list of channels you subscribed will be stored in the server's database. You can export, migrate or delete these data at any time from your user account page. Q: What data is shared with YouTube? A: By default, the video stream is fetched directly from Google's servers ( googlevideo.com ) in order to reduce the bandwidth required by invidious, meaning that Google will be able to see your IP address and some other data commonly sent by web browsers, like your user-agent string. If you don't want that to happen, you can go to the preferences page and check the Proxy videos option. When this option is enabled, the Invidious instance will be used as a relay (also known as a \"proxy\") between you and Google's servers, which will hide your IP address and the other information sent by your browser. Commonly encountered errors Q: The media could not be loaded\u2026 A: This problem can occur in different scenarios: If you're trying to watch a music clip, Youtube is likely blocking the video stream. Try enabling Proxy videos in the preferences (or add &local=1 in the URL). Switching to another instance is also a good alternative, as this type of content is often geo-restricted. Youtube often sends corrupted video data for the hd720 , medium and small quality settings. Refreshing the page multiple times (5-7) can fix the problem. You may also set your preferred video quality to dash (or add &quality=dash to the URL). Rarely, it can be due to an internal failure of the instance and the video stream can't be fetched. A simple page refresh can solve the issue. If none of the solutions listed above fix the problem, try switching instances. And if that still doesn't work, you'll have to watch the video on YouTube itself (sorry for the inconvenience). Q: Could not check out a connection in 2.0 seconds (DB::PoolTimeout) A: Please, do not open a bug report on github, we can't do anything! The instance you are using is having database issues . Please use another instance from the list of public instances Running your own instance Q: Do you provide pre-built binaries ( .deb , .rpm , etc.)? A: We currently don't provide those, due to the rolling release nature of Invidious. Get a fresh clone or pull the latest commits from master instead. Q: How can I configure [thing] ? A: Read the example config file ( config/config.example.yml ). All the supported configuration options are documented there. Q: RSS feeds/links/etc... URLs redirect to <IP>:3000 but I have a reverse proxy! A: Make sure that the following parameters are set according to your environment: - https_only : if your instance is served over HTTPS - domain : if you have a domain name that redirects to your instance - external_port : if your instance is accessed from a different port than the listening one (e.g your instance listens on :3000, but is available on :443 through a reverse proxy, set external_port to 443 ) Q: The \"popular\" feed/page on my instance is empty! A: The \"popular\" feed is generated from the videos that are popular amongst the users registered on your instance. If nobody has created an account on your instance (e.g if registration is disabled) the popular feed will be empty.","title":"Frequently Asked Questions"},{"location":"FAQ/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"FAQ/#table-of-contents","text":"Using Invidious Can I use Invidious on my device? Do you plan to make an Android/iOS app? What data is collected by Invidious? What data is shared with YouTube? Commonly encountered errors The media could not be loaded\u2026 Could not check out a connection in 2.0 seconds (DB::PoolTimeout) Running your own instance Do you provide pre-built binaries ( .deb , .rpm , etc..)? How can I configure [thing] ? RSS feeds/links/etc... URLs redirect to <IP>:3000 but I have a reverse proxy! The \"popular\" feed/page on my instance is empty!","title":"Table of Contents"},{"location":"FAQ/#using-invidious","text":"","title":"Using Invidious"},{"location":"FAQ/#q-can-i-use-invidious-on-my-device","text":"A: As long as your device is equipped with a modern web browser, sure, of course! A responsive interface is available for mobile/tablets.","title":"Q: Can I use Invidious on my device?"},{"location":"FAQ/#q-do-you-plan-to-make-an-androidios-app","text":"A: No. Invidious is and will always be a browser application. If you have an Android phone/tablet, you can check the NewPipe application.","title":"Q: Do you plan to make an Android/iOS app?"},{"location":"FAQ/#q-what-data-is-collected-by-invidious","text":"A: Invidious by itself does not collect any data about its users, but keep in mind that instance owners can log your IP address (like any other server on the internet). By default, the server logs which URLs were accessed, the associated error code (e.g 404 if the URL was not found) and the time it took for the server to respond. Here is what the server logs look like: 2021-08-30 18:15:44 UTC [info] 200 GET /watch?v=GIAKHj9uJtM 781.21ms 2021-08-30 18:15:49 UTC [info] 200 GET /api/v1/search?q=Fly%20away 500.0ms 2021-08-30 18:15:49 UTC [info] 200 GET /vi/lJcqAzWFWLs/mqdefault.jpg 15.82ms 2021-08-30 18:15:49 UTC [info] 200 GET /vi/JoP_Tte7z7o/mqdefault.jpg 70.64ms When you create an account, your watch history and the list of channels you subscribed will be stored in the server's database. You can export, migrate or delete these data at any time from your user account page.","title":"Q: What data is collected by Invidious?"},{"location":"FAQ/#q-what-data-is-shared-with-youtube","text":"A: By default, the video stream is fetched directly from Google's servers ( googlevideo.com ) in order to reduce the bandwidth required by invidious, meaning that Google will be able to see your IP address and some other data commonly sent by web browsers, like your user-agent string. If you don't want that to happen, you can go to the preferences page and check the Proxy videos option. When this option is enabled, the Invidious instance will be used as a relay (also known as a \"proxy\") between you and Google's servers, which will hide your IP address and the other information sent by your browser.","title":"Q: What data is shared with YouTube?"},{"location":"FAQ/#commonly-encountered-errors","text":"","title":"Commonly encountered errors"},{"location":"FAQ/#q-the-media-could-not-be-loaded","text":"A: This problem can occur in different scenarios: If you're trying to watch a music clip, Youtube is likely blocking the video stream. Try enabling Proxy videos in the preferences (or add &local=1 in the URL). Switching to another instance is also a good alternative, as this type of content is often geo-restricted. Youtube often sends corrupted video data for the hd720 , medium and small quality settings. Refreshing the page multiple times (5-7) can fix the problem. You may also set your preferred video quality to dash (or add &quality=dash to the URL). Rarely, it can be due to an internal failure of the instance and the video stream can't be fetched. A simple page refresh can solve the issue. If none of the solutions listed above fix the problem, try switching instances. And if that still doesn't work, you'll have to watch the video on YouTube itself (sorry for the inconvenience).","title":"Q: The media could not be loaded\u2026"},{"location":"FAQ/#q-could-not-check-out-a-connection-in-20-seconds-dbpooltimeout","text":"A: Please, do not open a bug report on github, we can't do anything! The instance you are using is having database issues . Please use another instance from the list of public instances","title":"Q: Could not check out a connection in 2.0 seconds (DB::PoolTimeout)"},{"location":"FAQ/#running-your-own-instance","text":"","title":"Running your own instance"},{"location":"FAQ/#q-do-you-provide-pre-built-binaries-deb-rpm-etc","text":"A: We currently don't provide those, due to the rolling release nature of Invidious. Get a fresh clone or pull the latest commits from master instead.","title":"Q: Do you provide pre-built binaries (.deb, .rpm, etc.)?"},{"location":"FAQ/#q-how-can-i-configure-thing","text":"A: Read the example config file ( config/config.example.yml ). All the supported configuration options are documented there.","title":"Q: How can I configure [thing]?"},{"location":"FAQ/#q-rss-feedslinksetc-urls-redirect-to-ip3000-but-i-have-a-reverse-proxy","text":"A: Make sure that the following parameters are set according to your environment: - https_only : if your instance is served over HTTPS - domain : if you have a domain name that redirects to your instance - external_port : if your instance is accessed from a different port than the listening one (e.g your instance listens on :3000, but is available on :443 through a reverse proxy, set external_port to 443 )","title":"Q: RSS feeds/links/etc... URLs redirect to &lt;IP&gt;:3000 but I have a reverse proxy!"},{"location":"FAQ/#q-the-popular-feedpage-on-my-instance-is-empty","text":"A: The \"popular\" feed is generated from the videos that are popular amongst the users registered on your instance. If nobody has created an account on your instance (e.g if registration is disabled) the popular feed will be empty.","title":"Q: The \"popular\" feed/page on my instance is empty!"},{"location":"Geoblocking%2C-available-video-quality-and-DASH/","tags":null,"text":"Geoblocking Sometimes you may notice that you cannot watch a video on Invidious. This is because YouTube is geoblocking, i.e. preventing access to videos based on your geographical location. If the Proxy videos? setting is enabled, Invidious will proxy videos through itself, so the stream will be routed like this: YouTube \u2192 Invidious/server \u2192 Client/browser If a video is blocked where the instance is hosted, then the route would be this: YouTube \u2192 Proxy server \u2192 Invidious/server \u2192 Client/browser The current system works by cycling through proxies in different regions, and finding one where the video is not blocked. The reason geoblocked videos may take a long time to load is because Invidious would have to cycle through all known proxy servers until it finds one that is able to play back the video. If the Proxy videos? setting is disabled, then the stream would be routed like this: YouTube \u2192 Client/browser Video quality and DASH On Invidious you often don't have the same quality options as on YouTube. This is because the audio and video streams are separated and Invidious currently can't sync them together. DASH is a streaming technique used by YouTube to provide resolutions higher than 720p by providing multiple files for a client to use depending on network and user preferences. You can enable DASH by selecting the appropriately named video quality in the settings or by appending &quality=dash to the end of a video's URL. With this option enabled, the stream is proxied through Invidious for you to then watch at a higher or automatic quality.","title":"Geoblocking,-available-video-quality-and-DASH"},{"location":"Geoblocking%2C-available-video-quality-and-DASH/#geoblocking","text":"Sometimes you may notice that you cannot watch a video on Invidious. This is because YouTube is geoblocking, i.e. preventing access to videos based on your geographical location. If the Proxy videos? setting is enabled, Invidious will proxy videos through itself, so the stream will be routed like this: YouTube \u2192 Invidious/server \u2192 Client/browser If a video is blocked where the instance is hosted, then the route would be this: YouTube \u2192 Proxy server \u2192 Invidious/server \u2192 Client/browser The current system works by cycling through proxies in different regions, and finding one where the video is not blocked. The reason geoblocked videos may take a long time to load is because Invidious would have to cycle through all known proxy servers until it finds one that is able to play back the video. If the Proxy videos? setting is disabled, then the stream would be routed like this: YouTube \u2192 Client/browser","title":"Geoblocking"},{"location":"Geoblocking%2C-available-video-quality-and-DASH/#video-quality-and-dash","text":"On Invidious you often don't have the same quality options as on YouTube. This is because the audio and video streams are separated and Invidious currently can't sync them together. DASH is a streaming technique used by YouTube to provide resolutions higher than 720p by providing multiple files for a client to use depending on network and user preferences. You can enable DASH by selecting the appropriately named video quality in the settings or by appending &quality=dash to the end of a video's URL. With this option enabled, the stream is proxied through Invidious for you to then watch at a higher or automatic quality.","title":"Video quality and DASH"},{"location":"How-to-deal-with-uMatrix/","tags":null,"text":"If you're using uMatrix , you won't be able to automatically play a video served by Invidious on other websites without unblocking requests to Invidious instances. So, to make it work, you'll need to allow css , image , media , script , xhr , frame for the instance from which you're trying to play the video. Since there are many Invidious instances, you can use the tool called Invimatrix to automatically generate uMatrix rules for every known instance.","title":"How-to-deal-with-uMatrix"},{"location":"How-to-setup-Anti-Captcha/","tags":null,"text":"Register on anti-captcha.com and finish the registration with the link provided in your mailbox. Head over to the Add fund page and use whatever currency you prefer to use for adding $2 into your balance. Do note that cryptocurrencies give a bonus of 20% the first time you add funds and then 10% for each new recharge. After adding funds, go to the API key link and copy your Account Key ( never share it, it's confidential ). Edit your Invidious config.yml file (should be located in the config directory) and add your account key at the end of the file after the captcha_key parameter. Here is an example: captcha_key: acuGae2riad5quashoug3Leeh Restart Invidious and that's it!","title":"How-to-setup-Anti-Captcha"},{"location":"Installation/","tags":null,"text":"Installation Compiling Invidious requires at least 2GB of free RAM (We recommend to have at least 3GB installed). If you have less (e.g on a cheap VPS) you can setup a SWAP file or partition, so the combined amount is >= 3GB. After installation take a look at the Post-install steps . Note: Any PaaS or SaaS provider/software (Heroku, YunoHost, Repli...) are unsupported. Use them at your own risk. They WILL cause problems with Invidious and might even suspend your account for \"abuse\" since Invidious is heavy, bandwidth intensive and technically a proxy (and most providers don't like them). If you use one and want to report an issue, please mention which one you use. Automated Installation Invidious-Updater is a self-contained script that can automatically install and update Invidious. Docker The Invidious docker image is only available on Quay because, unlike Docker Hub, Quay is Free and Open Source Software . This is reflected in the docker-compose.yml file used in this walk-through.{.is-warning} Ensure Docker Engine and Docker Compose are installed before beginning. Docker-compose method (production) This method uses the pre-built Docker image from quay Note: Currently the repository has to be cloned, this is because the init-invidious-db.sh file and the config/sql directory have to be mounted to the postgres container (See the volumes section in the docker-compose file below). This \"problem\" will be solved in the future. git clone https://github.com/iv-org/invidious.git cd invidious Edit the docker-compose.yml with this content: version: \"3\" services: invidious: image: quay.io/invidious/invidious:latest # image: quay.io/invidious/invidious:latest-arm64 # ARM64/AArch64 devices restart: unless-stopped ports: - \"127.0.0.1:3000:3000\" environment: # Please read the following file for a comprehensive list of all available # configuration options and their associated syntax: # https://github.com/iv-org/invidious/blob/master/config/config.example.yml INVIDIOUS_CONFIG: | db: dbname: invidious user: kemal password: kemal host: invidious-db port: 5432 check_tables: true # external_port: # domain: # https_only: false # statistics_enabled: false healthcheck: test: wget -nv --tries=1 --spider http://127.0.0.1:3000/api/v1/comments/jNQXAC9IVRw || exit 1 interval: 30s timeout: 5s retries: 2 depends_on: - invidious-db invidious-db: image: docker.io/library/postgres:14 restart: unless-stopped volumes: - postgresdata:/var/lib/postgresql/data - ./config/sql:/config/sql - ./docker/init-invidious-db.sh:/docker-entrypoint-initdb.d/init-invidious-db.sh environment: POSTGRES_DB: invidious POSTGRES_USER: kemal POSTGRES_PASSWORD: kemal healthcheck: test: [\"CMD-SHELL\", \"pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB\"] volumes: postgresdata: Note: This compose is made for a true \"production\" setup, where Invidious is behind a reverse proxy. If you prefer to directly access Invidious, replace 127.0.0.1:3000:3000 with 3000:3000 under the ports: section. The environment variable POSTGRES_USER cannot be changed. The SQL config files that run the initial database migrations are hard-coded with the username kemal . {.is-warning} Docker-compose method (development) This method builds a Docker image from source git clone https://github.com/iv-org/invidious.git cd invidious docker-compose up Manual Installation Linux Install Crystal Follow the instructions for your distribution here: https://crystal-lang.org/install/ Install the dependencies Arch Linux sudo pacman -S base-devel librsvg postgresql Debian/Ubuntu sudo apt install libssl-dev libxml2-dev libyaml-dev libgmp-dev libreadline-dev postgresql librsvg2-bin libsqlite3-dev zlib1g-dev libpcre3-dev libevent-dev RHEL based and RHEL-like systems (RHEL, Fedora, AlmaLinux, RockyLinux...) sudo dnf install -y openssl-devel libevent-devel libxml2-devel libyaml-devel gmp-devel readline-devel postgresql librsvg2-devel sqlite-devel zlib-devel gcc Add an Invidious user and clone the repository useradd -m invidious su - invidious git clone https://github.com/iv-org/invidious exit Set up PostgresSQL systemctl enable --now postgresql sudo -i -u postgres psql -c \"CREATE USER kemal WITH PASSWORD 'kemal';\" # Change 'kemal' here to a stronger password, and update `password` in config/config.yml createdb -O kemal invidious psql invidious kemal < /home/invidious/invidious/config/sql/channels.sql psql invidious kemal < /home/invidious/invidious/config/sql/videos.sql psql invidious kemal < /home/invidious/invidious/config/sql/channel_videos.sql psql invidious kemal < /home/invidious/invidious/config/sql/users.sql psql invidious kemal < /home/invidious/invidious/config/sql/session_ids.sql psql invidious kemal < /home/invidious/invidious/config/sql/nonces.sql psql invidious kemal < /home/invidious/invidious/config/sql/annotations.sql psql invidious kemal < /home/invidious/invidious/config/sql/playlists.sql psql invidious kemal < /home/invidious/invidious/config/sql/playlist_videos.sql exit Set up Invidious su - invidious cd invidious shards install --production crystal build src/invidious.cr --release exit Systemd service cp /home/invidious/invidious/invidious.service /etc/systemd/system/invidious.service systemctl enable --now invidious.service MacOS # Install dependencies brew update brew install shards crystal postgres imagemagick librsvg # Clone the repository and set up a PostgreSQL database git clone https://github.com/iv-org/invidious cd invidious brew services start postgresql psql -c \"CREATE ROLE kemal WITH PASSWORD 'kemal';\" # Change 'kemal' here to a stronger password, and update `password` in config/config.yml createdb -O kemal invidious psql invidious kemal < config/sql/channels.sql psql invidious kemal < config/sql/videos.sql psql invidious kemal < config/sql/channel_videos.sql psql invidious kemal < config/sql/users.sql psql invidious kemal < config/sql/session_ids.sql psql invidious kemal < config/sql/nonces.sql psql invidious kemal < config/sql/annotations.sql psql invidious kemal < config/sql/privacy.sql psql invidious kemal < config/sql/playlists.sql psql invidious kemal < config/sql/playlist_videos.sql # Set up Invidious shards update && shards install && crystal build src/invidious.cr --release Post-install configuration: Detailed configuration available in the configuration guide . Because of various issues Invidious must be restarted often, at least once a day, ideally every hour. If you use a reverse proxy, you must configure invidious to properly serve request through it: https_only: true : if you are serving your instance via https, set it to true domain: domain.ext : if you are serving your instance via a domain name, set it here external_port: 443 : if you are serving your instance via https, set it to 443 Update Invidious Updating a Docker install docker-compose pull && docker-compose up && docker image prune -f Update a manual install sudo - invidious cd invidious shards update && shards install && crystal build src/invidious.cr --release exit systemctl restart invidious.service Usage: ./invidious Logrotate configuration echo \"/home/invidious/invidious/invidious.log { rotate 4 weekly notifempty missingok compress minsize 1048576 }\" | tee /etc/logrotate.d/invidious.logrotate chmod 0644 /etc/logrotate.d/invidious.logrotate","title":"Installation"},{"location":"Installation/#installation","text":"Compiling Invidious requires at least 2GB of free RAM (We recommend to have at least 3GB installed). If you have less (e.g on a cheap VPS) you can setup a SWAP file or partition, so the combined amount is >= 3GB. After installation take a look at the Post-install steps . Note: Any PaaS or SaaS provider/software (Heroku, YunoHost, Repli...) are unsupported. Use them at your own risk. They WILL cause problems with Invidious and might even suspend your account for \"abuse\" since Invidious is heavy, bandwidth intensive and technically a proxy (and most providers don't like them). If you use one and want to report an issue, please mention which one you use.","title":"Installation"},{"location":"Installation/#automated-installation","text":"Invidious-Updater is a self-contained script that can automatically install and update Invidious.","title":"Automated Installation"},{"location":"Installation/#docker","text":"The Invidious docker image is only available on Quay because, unlike Docker Hub, Quay is Free and Open Source Software . This is reflected in the docker-compose.yml file used in this walk-through.{.is-warning} Ensure Docker Engine and Docker Compose are installed before beginning.","title":"Docker"},{"location":"Installation/#docker-compose-method-production","text":"This method uses the pre-built Docker image from quay Note: Currently the repository has to be cloned, this is because the init-invidious-db.sh file and the config/sql directory have to be mounted to the postgres container (See the volumes section in the docker-compose file below). This \"problem\" will be solved in the future. git clone https://github.com/iv-org/invidious.git cd invidious Edit the docker-compose.yml with this content: version: \"3\" services: invidious: image: quay.io/invidious/invidious:latest # image: quay.io/invidious/invidious:latest-arm64 # ARM64/AArch64 devices restart: unless-stopped ports: - \"127.0.0.1:3000:3000\" environment: # Please read the following file for a comprehensive list of all available # configuration options and their associated syntax: # https://github.com/iv-org/invidious/blob/master/config/config.example.yml INVIDIOUS_CONFIG: | db: dbname: invidious user: kemal password: kemal host: invidious-db port: 5432 check_tables: true # external_port: # domain: # https_only: false # statistics_enabled: false healthcheck: test: wget -nv --tries=1 --spider http://127.0.0.1:3000/api/v1/comments/jNQXAC9IVRw || exit 1 interval: 30s timeout: 5s retries: 2 depends_on: - invidious-db invidious-db: image: docker.io/library/postgres:14 restart: unless-stopped volumes: - postgresdata:/var/lib/postgresql/data - ./config/sql:/config/sql - ./docker/init-invidious-db.sh:/docker-entrypoint-initdb.d/init-invidious-db.sh environment: POSTGRES_DB: invidious POSTGRES_USER: kemal POSTGRES_PASSWORD: kemal healthcheck: test: [\"CMD-SHELL\", \"pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB\"] volumes: postgresdata: Note: This compose is made for a true \"production\" setup, where Invidious is behind a reverse proxy. If you prefer to directly access Invidious, replace 127.0.0.1:3000:3000 with 3000:3000 under the ports: section. The environment variable POSTGRES_USER cannot be changed. The SQL config files that run the initial database migrations are hard-coded with the username kemal . {.is-warning}","title":"Docker-compose method (production)"},{"location":"Installation/#docker-compose-method-development","text":"This method builds a Docker image from source git clone https://github.com/iv-org/invidious.git cd invidious docker-compose up","title":"Docker-compose method (development)"},{"location":"Installation/#manual-installation","text":"","title":"Manual Installation"},{"location":"Installation/#linux","text":"","title":"Linux"},{"location":"Installation/#install-crystal","text":"Follow the instructions for your distribution here: https://crystal-lang.org/install/","title":"Install Crystal"},{"location":"Installation/#install-the-dependencies","text":"Arch Linux sudo pacman -S base-devel librsvg postgresql Debian/Ubuntu sudo apt install libssl-dev libxml2-dev libyaml-dev libgmp-dev libreadline-dev postgresql librsvg2-bin libsqlite3-dev zlib1g-dev libpcre3-dev libevent-dev RHEL based and RHEL-like systems (RHEL, Fedora, AlmaLinux, RockyLinux...) sudo dnf install -y openssl-devel libevent-devel libxml2-devel libyaml-devel gmp-devel readline-devel postgresql librsvg2-devel sqlite-devel zlib-devel gcc","title":"Install the dependencies"},{"location":"Installation/#add-an-invidious-user-and-clone-the-repository","text":"useradd -m invidious su - invidious git clone https://github.com/iv-org/invidious exit","title":"Add an Invidious user and clone the repository"},{"location":"Installation/#set-up-postgressql","text":"systemctl enable --now postgresql sudo -i -u postgres psql -c \"CREATE USER kemal WITH PASSWORD 'kemal';\" # Change 'kemal' here to a stronger password, and update `password` in config/config.yml createdb -O kemal invidious psql invidious kemal < /home/invidious/invidious/config/sql/channels.sql psql invidious kemal < /home/invidious/invidious/config/sql/videos.sql psql invidious kemal < /home/invidious/invidious/config/sql/channel_videos.sql psql invidious kemal < /home/invidious/invidious/config/sql/users.sql psql invidious kemal < /home/invidious/invidious/config/sql/session_ids.sql psql invidious kemal < /home/invidious/invidious/config/sql/nonces.sql psql invidious kemal < /home/invidious/invidious/config/sql/annotations.sql psql invidious kemal < /home/invidious/invidious/config/sql/playlists.sql psql invidious kemal < /home/invidious/invidious/config/sql/playlist_videos.sql exit","title":"Set up PostgresSQL"},{"location":"Installation/#set-up-invidious","text":"su - invidious cd invidious shards install --production crystal build src/invidious.cr --release exit","title":"Set up Invidious"},{"location":"Installation/#systemd-service","text":"cp /home/invidious/invidious/invidious.service /etc/systemd/system/invidious.service systemctl enable --now invidious.service","title":"Systemd service"},{"location":"Installation/#macos","text":"# Install dependencies brew update brew install shards crystal postgres imagemagick librsvg # Clone the repository and set up a PostgreSQL database git clone https://github.com/iv-org/invidious cd invidious brew services start postgresql psql -c \"CREATE ROLE kemal WITH PASSWORD 'kemal';\" # Change 'kemal' here to a stronger password, and update `password` in config/config.yml createdb -O kemal invidious psql invidious kemal < config/sql/channels.sql psql invidious kemal < config/sql/videos.sql psql invidious kemal < config/sql/channel_videos.sql psql invidious kemal < config/sql/users.sql psql invidious kemal < config/sql/session_ids.sql psql invidious kemal < config/sql/nonces.sql psql invidious kemal < config/sql/annotations.sql psql invidious kemal < config/sql/privacy.sql psql invidious kemal < config/sql/playlists.sql psql invidious kemal < config/sql/playlist_videos.sql # Set up Invidious shards update && shards install && crystal build src/invidious.cr --release","title":"MacOS"},{"location":"Installation/#post-install-configuration","text":"Detailed configuration available in the configuration guide . Because of various issues Invidious must be restarted often, at least once a day, ideally every hour. If you use a reverse proxy, you must configure invidious to properly serve request through it: https_only: true : if you are serving your instance via https, set it to true domain: domain.ext : if you are serving your instance via a domain name, set it here external_port: 443 : if you are serving your instance via https, set it to 443","title":"Post-install configuration:"},{"location":"Installation/#update-invidious","text":"","title":"Update Invidious"},{"location":"Installation/#updating-a-docker-install","text":"docker-compose pull && docker-compose up && docker image prune -f","title":"Updating a Docker install"},{"location":"Installation/#update-a-manual-install","text":"sudo - invidious cd invidious shards update && shards install && crystal build src/invidious.cr --release exit systemctl restart invidious.service","title":"Update a manual install"},{"location":"Installation/#usage","text":"./invidious","title":"Usage:"},{"location":"Installation/#logrotate-configuration","text":"echo \"/home/invidious/invidious/invidious.log { rotate 4 weekly notifempty missingok compress minsize 1048576 }\" | tee /etc/logrotate.d/invidious.logrotate chmod 0644 /etc/logrotate.d/invidious.logrotate","title":"Logrotate configuration"},{"location":"Invidious-Instances/","tags":null,"text":"Public Invidious Instances: Uptime History provided by Uptimerobot Instances API Warning: Any public instance that isn't in this list is considered untrustworthy. Use them at your own risk. List of public Invidious Instances (sorted from oldest to newest): invidious.snopyta.org \ud83c\uddeb\ud83c\uddee yewtu.be \ud83c\uddf3\ud83c\uddf1 - Source code/changes: https://github.com/unixfox/invidious-custom invidious.kavin.rocks \ud83c\uddee\ud83c\uddf3 invidious-us.kavin.rocks \ud83c\uddfa\ud83c\uddf8 (uses Cloudflare) vid.puffyan.us \ud83c\uddfa\ud83c\uddf8 invidious.namazso.eu \ud83c\udde9\ud83c\uddea inv.riverside.rocks \ud83c\uddfa\ud83c\uddf8 invidious.osi.kr \ud83c\uddf3\ud83c\uddf1 Status Page invidio.xamh.de \ud83c\udde9\ud83c\uddea youtube.076.ne.jp \ud83c\uddef\ud83c\uddf5 - Source code/changes: https://git.076.ne.jp/TechnicalSuwako/invidious-mod yt.artemislena.eu \ud83c\udde9\ud83c\uddea tube.cthd.icu \ud83c\uddf7\ud83c\uddf8 - Source code/changes: https://gitlab.cthd.icu/cthd/invidious-custom invidious.flokinet.to \ud83c\uddf7\ud83c\uddf4 invidious.privacy.gd \ud83c\uddfa\ud83c\uddf8 invidious.weblibre.org \ud83c\udde8\ud83c\uddf1 invidious.esmailelbob.xyz \ud83c\udde8\ud83c\udde6 Tor Onion Services: c7hqkpkpemu6e7emz5b4vyz7idjgdvgaaa3dyimmeojqbgpea3xqjoid.onion \ud83c\uddeb\ud83c\uddee (Onion of invidious.snopyta.org) w6ijuptxiku4xpnnaetxvnkc5vqcdu7mgns2u77qefoixi63vbvnpnqd.onion kbjggqkzv65ivcqj6bumvp337z6264huv5kpkwuv6gu5yjiskvan7fad.onion \ud83c\uddf3\ud83c\uddf1 grwp24hodrefzvjjuccrkw3mjq4tzhaaq32amf33dzpmuxe7ilepcmad.onion \ud83c\uddfa\ud83c\uddf8 (Onion of vid.puffyan.us) hpniueoejy4opn7bc4ftgazyqjoeqwlvh2uiku2xqku6zpoa4bf5ruid.onion \ud83c\uddfa\ud83c\uddf8 (Onion of invidious-us.kavin.rocks) osbivz6guyeahrwp2lnwyjk2xos342h4ocsxyqrlaopqjuhwn2djiiyd.onion \ud83c\uddf3\ud83c\uddf1 (Onion of invidious.hub.ne.kr) u2cvlit75owumwpy4dj2hsmvkq7nvrclkpht7xgyye2pyoxhpmclkrad.onion \ud83c\uddfa\ud83c\uddf8 (Onion of inv.riverside.rocks) 2rorw2w54tr7jkasn53l5swbjnbvz3ubebhswscnc54yac6gmkxaeeqd.onion \ud83c\uddfa\ud83c\uddf8 (Onion of invidious.privacy.gd) Rules to have your instance in this list: Instances MUST have been up for at least a month before it can be added to this list. Instances MUST have been updated in the last month. An instance that hasn't been updated in the last month is considered unmaintained and is removed from the list. Instances MUST have statistics (/api/v1/stats) enabled ( statistics_enabled:true in the configuration file). Instances MUST have an uptime of at least 90% ( according to uptime.invidious.io ). Instances MUST be served via domain name. Instances MUST be served via HTTPS (or/and onion). Instances using any DDoS Protection / MITM MUST be marked as such (eg: Cloudflare, DDoS-Guard...). Instances using any type of anti-bot protection MUST be marked as such. Instances MUST NOT use any type of analytics. Any system whose goal is to modify the content served to the user (i.e web server HTML rewrite) is considered the same as modifying the source code. Instances running a modified source code: MUST respect the AGPL by publishing their source code and stating their changes before they are be added to the list MUST publish any later modification in a timely manner MUST contain a link to both the modified and original source code of Invidious in the footer. Instances MUST NOT serve ads (sponsorship links in the banner are considered ads) NOR promote products. NOTE: We reserve the right to decline any instance from being added to the list, and to remove or ban any instance that repeatedly breaks the aforementioned rules.","title":"Invidious-Instances"},{"location":"Invidious-Instances/#public-invidious-instances","text":"Uptime History provided by Uptimerobot Instances API Warning: Any public instance that isn't in this list is considered untrustworthy. Use them at your own risk.","title":"Public Invidious Instances:"},{"location":"Invidious-Instances/#list-of-public-invidious-instances-sorted-from-oldest-to-newest","text":"invidious.snopyta.org \ud83c\uddeb\ud83c\uddee yewtu.be \ud83c\uddf3\ud83c\uddf1 - Source code/changes: https://github.com/unixfox/invidious-custom invidious.kavin.rocks \ud83c\uddee\ud83c\uddf3 invidious-us.kavin.rocks \ud83c\uddfa\ud83c\uddf8 (uses Cloudflare) vid.puffyan.us \ud83c\uddfa\ud83c\uddf8 invidious.namazso.eu \ud83c\udde9\ud83c\uddea inv.riverside.rocks \ud83c\uddfa\ud83c\uddf8 invidious.osi.kr \ud83c\uddf3\ud83c\uddf1 Status Page invidio.xamh.de \ud83c\udde9\ud83c\uddea youtube.076.ne.jp \ud83c\uddef\ud83c\uddf5 - Source code/changes: https://git.076.ne.jp/TechnicalSuwako/invidious-mod yt.artemislena.eu \ud83c\udde9\ud83c\uddea tube.cthd.icu \ud83c\uddf7\ud83c\uddf8 - Source code/changes: https://gitlab.cthd.icu/cthd/invidious-custom invidious.flokinet.to \ud83c\uddf7\ud83c\uddf4 invidious.privacy.gd \ud83c\uddfa\ud83c\uddf8 invidious.weblibre.org \ud83c\udde8\ud83c\uddf1 invidious.esmailelbob.xyz \ud83c\udde8\ud83c\udde6","title":"List of public Invidious Instances (sorted from oldest to newest):"},{"location":"Invidious-Instances/#tor-onion-services","text":"c7hqkpkpemu6e7emz5b4vyz7idjgdvgaaa3dyimmeojqbgpea3xqjoid.onion \ud83c\uddeb\ud83c\uddee (Onion of invidious.snopyta.org) w6ijuptxiku4xpnnaetxvnkc5vqcdu7mgns2u77qefoixi63vbvnpnqd.onion kbjggqkzv65ivcqj6bumvp337z6264huv5kpkwuv6gu5yjiskvan7fad.onion \ud83c\uddf3\ud83c\uddf1 grwp24hodrefzvjjuccrkw3mjq4tzhaaq32amf33dzpmuxe7ilepcmad.onion \ud83c\uddfa\ud83c\uddf8 (Onion of vid.puffyan.us) hpniueoejy4opn7bc4ftgazyqjoeqwlvh2uiku2xqku6zpoa4bf5ruid.onion \ud83c\uddfa\ud83c\uddf8 (Onion of invidious-us.kavin.rocks) osbivz6guyeahrwp2lnwyjk2xos342h4ocsxyqrlaopqjuhwn2djiiyd.onion \ud83c\uddf3\ud83c\uddf1 (Onion of invidious.hub.ne.kr) u2cvlit75owumwpy4dj2hsmvkq7nvrclkpht7xgyye2pyoxhpmclkrad.onion \ud83c\uddfa\ud83c\uddf8 (Onion of inv.riverside.rocks) 2rorw2w54tr7jkasn53l5swbjnbvz3ubebhswscnc54yac6gmkxaeeqd.onion \ud83c\uddfa\ud83c\uddf8 (Onion of invidious.privacy.gd)","title":"Tor Onion Services:"},{"location":"Invidious-Instances/#rules-to-have-your-instance-in-this-list","text":"Instances MUST have been up for at least a month before it can be added to this list. Instances MUST have been updated in the last month. An instance that hasn't been updated in the last month is considered unmaintained and is removed from the list. Instances MUST have statistics (/api/v1/stats) enabled ( statistics_enabled:true in the configuration file). Instances MUST have an uptime of at least 90% ( according to uptime.invidious.io ). Instances MUST be served via domain name. Instances MUST be served via HTTPS (or/and onion). Instances using any DDoS Protection / MITM MUST be marked as such (eg: Cloudflare, DDoS-Guard...). Instances using any type of anti-bot protection MUST be marked as such. Instances MUST NOT use any type of analytics. Any system whose goal is to modify the content served to the user (i.e web server HTML rewrite) is considered the same as modifying the source code. Instances running a modified source code: MUST respect the AGPL by publishing their source code and stating their changes before they are be added to the list MUST publish any later modification in a timely manner MUST contain a link to both the modified and original source code of Invidious in the footer. Instances MUST NOT serve ads (sponsorship links in the banner are considered ads) NOR promote products. NOTE: We reserve the right to decline any instance from being added to the list, and to remove or ban any instance that repeatedly breaks the aforementioned rules.","title":"Rules to have your instance in this list:"},{"location":"Issues-with-CAPTCHA-on-Debian-and-Ubuntu/","tags":null,"text":"Warning: If you use ImageMagick on Ubuntu for other services like Mastodon this guide may break them, please use this guide instead. There is some issue on Debian 9 and Ubuntu 18.04 and later. It appears that the clock (the CAPTCHA) has no hands but you can see them outside the clock. You need to compile ImageMagick yourself with librsvg to solve this issue. Thanks Tmiland for showing us a solution at #299 For lazy people, a little hack is to disable CAPTCHA or use text one. You can check if your version of ImageMagick is affected with convert -list format . It should show the following if your installed version is okay. SVG SVG rw+ Scalable Vector Graphics (RSVG 2.40.13) SVGZ SVG rw+ Compressed Scalable Vector Graphics (RSVG 2.40.13) If this is not the case, your version is not compiled with librsvg, then you get the following. SVG SVG rw+ Scalable Vector Graphics (XML 2.9.4) SVGZ SVG rw+ Compressed Scalable Vector Graphics (XML 2.9.4) Follow the steps to fix this issue: $ sudo apt purge imagemagick $ cd /tmp # check for new releases: https://github.com/ImageMagick/ImageMagick6/releases $ wget https://github.com/ImageMagick/ImageMagick6/archive/6.9.11-19.tar.gz $ tar -xvf 6.9.10-24.tar.gz $ cd ImageMagick6-6.9.10-24 $ ./configure --with-rsvg $ make $ sudo make install Set the correct path: $ sudo ln -s /usr/local/bin/convert /usr/bin/convert If you get an error here that this file already exists, please execute $ sudo apt autoremove Now convert -list format reports SVG rw+ Scalable Vector Graphics (RSVG 2.40.16) SVGZ rw+ Compressed Scalable Vector Graphics (RSVG 2.40.16) Restart Invidious, just to be sure: $ sudo systemctl restart invidious.service","title":"Issues-with-CAPTCHA-on-Debian-and-Ubuntu"},{"location":"Issues-with-CAPTCHA-on-Debian-and-Ubuntu/#warning-if-you-use-imagemagick-on-ubuntu-for-other-services-like-mastodon-this-guide-may-break-them-please-use-this-guide-instead","text":"There is some issue on Debian 9 and Ubuntu 18.04 and later. It appears that the clock (the CAPTCHA) has no hands but you can see them outside the clock. You need to compile ImageMagick yourself with librsvg to solve this issue. Thanks Tmiland for showing us a solution at #299 For lazy people, a little hack is to disable CAPTCHA or use text one. You can check if your version of ImageMagick is affected with convert -list format . It should show the following if your installed version is okay. SVG SVG rw+ Scalable Vector Graphics (RSVG 2.40.13) SVGZ SVG rw+ Compressed Scalable Vector Graphics (RSVG 2.40.13) If this is not the case, your version is not compiled with librsvg, then you get the following. SVG SVG rw+ Scalable Vector Graphics (XML 2.9.4) SVGZ SVG rw+ Compressed Scalable Vector Graphics (XML 2.9.4) Follow the steps to fix this issue: $ sudo apt purge imagemagick $ cd /tmp # check for new releases: https://github.com/ImageMagick/ImageMagick6/releases $ wget https://github.com/ImageMagick/ImageMagick6/archive/6.9.11-19.tar.gz $ tar -xvf 6.9.10-24.tar.gz $ cd ImageMagick6-6.9.10-24 $ ./configure --with-rsvg $ make $ sudo make install Set the correct path: $ sudo ln -s /usr/local/bin/convert /usr/bin/convert If you get an error here that this file already exists, please execute $ sudo apt autoremove Now convert -list format reports SVG rw+ Scalable Vector Graphics (RSVG 2.40.16) SVGZ rw+ Compressed Scalable Vector Graphics (RSVG 2.40.16) Restart Invidious, just to be sure: $ sudo systemctl restart invidious.service","title":"Warning: If you use ImageMagick on Ubuntu for other services like Mastodon this guide may break them, please use this guide instead."},{"location":"Known-Exception-in-log/","tags":null,"text":"In this wiki page some known exceptions from the logfile are listed. You normally do not have to worry if you see them. Error reading socket: Connection reset by peer (Errno) \"Connection reset by peer\" means the client disconnected before the site finished loading Error writing to socket: Broken pipe (Errno)","title":"Known-Exception-in-log"},{"location":"Known-Exception-in-log/#error-reading-socket-connection-reset-by-peer-errno","text":"\"Connection reset by peer\" means the client disconnected before the site finished loading","title":"Error reading socket: Connection reset by peer (Errno)"},{"location":"Known-Exception-in-log/#error-writing-to-socket-broken-pipe-errno","text":"","title":"Error writing to socket: Broken pipe (Errno)"},{"location":"List-of-URL-parameters/","tags":null,"text":"A list of URL parameters for Invidious, which can automatically toggle various UI and player settings. This list is incomplete. You can help by expanding it. Parameter Setting Site-wide parameters Dark mode Configure default theme without setting cookies dark_mode=true Use dark theme dark_mode=false Use light theme Thin mode Load HTML, CSS, JS and video elements (disables images) thin_mode=true Enabled thin_mode=false Disabled UI Language Available locales are also listed here hl=ar Arabic hl=de German hl=el Greek hl=en-US English hl=eo Esperanto hl=es Spanish hl=eu Basque hl=fr French hl=is Icelandic hl=it Italian hl=nb_NO Norwegian Bokm\u00e5l hl=nl Dutch hl=pl Polish hl=ru Russian hl=uk Ukranian hl=zh-CN Chinese (traditional) Player parameters Available parameters also listed here Annotations Show legacy annotations, provided by the Internet Archive iv_load_policy=1 Show annotations iv_load_policy=3 Hide annotations Autoplay Automatically play video on load autoplay=1 Enabled autoplay=0 Disabled Continue When video is done, automatically go to the next related video (similar to YouTube\u2019s Autoplay feature) continue=1 Enabled continue=0 Disabled Listen Play only audio portion of video listen=true Enabled listen=false Disabled Local Proxy video streams, equivalent to enabling Proxy videos? in preferences local=true Enabled local=false Disabled Subtitles List of ISO 639-1 language codes (comma-separated) subtitles=en English (will use auto-generated if native translation is unavailable) Quality Default player quality quality=dash DASH quality=hd720 720p quality=medium 480p Related Videos Show \"Related videos\" tab on the right-hand side related_videos=false Disabled Speed Default player speed, can be any positive number speed=0.5 Play at 0.5x speed speed=2 Play at 2x speed speed=9.34 Play at 9.34x speed Loop Loop player by default loop=1 Enabled loop=0 Disabled Volume Default player volume, can be any whole number between 0 and 100 volume=10 Play video at 10% volume Region Provide \"hint\" (as ISO 3166 country code) for Invidious to load videos from the specified region region=JP Attempt to load video as if the user were in Japan region=DE Attempt to load video as if the user were in Germany Controls Provide player controls controls=1 Enabled controls=0 Disabled Raw Redirect to latest copy of video at the specified quality and optionally proxy video raw=1 Enabled raw=0 Disabled Time controls Control when the player starts and stops playback. Providing loop=1 will only loop the specified section start=TIME , t=TIME , time_continue=TIME Start playback at TIME seconds into the video. Supports TIME as either an integer specifying seconds or using 12h30m10s22ms syntax. For example, t=12m9s is equivalent to t=729 end=TIME Stop playback at either TIME seconds or using the above mentioned 12h56m10s22ms syntax. Search parameters Region Provide \"hint\" (as ISO 3166 country code) for Invidious to load search results from the specified region region=JP Attempt to load search results as if the user were in Japan region=DE Attempt to load search results as if the user were in Germany Trending parameters Trending type View trending videos only in a specific category type=Default Default type=Music Music type=Gaming Gaming type=News News type=Movies Movies Region Provide \"hint\" (as ISO 3166 country code) for Invidious to load trending videos from the specified region region=JP Load videos that are trending in Japan region=DE Load videos that are trending in Germany Player Style player_style=invidious Invidious, the default player_style=youtube YouTube, using a centered play button and always visible video control bar","title":"List-of-URL-parameters"},{"location":"NGINX-Reverse-Proxy/","tags":null,"text":"This is a very basic config, secured with Let's Encrypt. Any log is disabled by default. Do not forget to replace server_name with your domain. server { listen 80; listen [::]:80; listen 443 ssl http2; listen [::]:443 ssl http2; server_name invidious.domain.tld; access_log off; error_log /var/log/nginx/error.log crit; ssl_certificate /etc/letsencrypt/live/invidious.domain.tld/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/invidious.domain.tld/privkey.pem; location / { proxy_pass http://127.0.0.1:3000/; proxy_set_header X-Forwarded-For $remote_addr; proxy_set_header Host $host; # so Invidious knows domain proxy_http_version 1.1; # to keep alive proxy_set_header Connection \"\"; # to keep alive } if ($https = '') { return 301 https://$host$request_uri; } # if not connected to HTTPS, perma-redirect to HTTPS }","title":"NGINX-Reverse-Proxy"},{"location":"Preferences/","tags":null,"text":"Preferences for Invidious can be stored in a cookie named PREFS . This cookie can be set on the Invidious Preferences page. If setting the cookie value yourself, the value must be in JSON format and then URL-encoded. These are the preferences you can set: { \"video_loop\":true, // Always loop \"annotations\":true, // Show annotations \"annotations_subscribed\":true, // Show annotations for subscribed channels \"autoplay\":true, // Autoplay current video \"continue\":true, // Load next video when current video finishes \"continue_autoplay\":true, // Load and autoplay next video \"listen\":true, // Audio-only mode by default \"local\": true, // Proxy requests via Invidious instance for privacy \"speed\":1.0, // Also accepts '0.5', '1.5', '2.0' \"quality\":\"hd720\", // Also accepts 'dash' for 1080p, 'medium', 'small' \"volume\":100, // Default audio volume (0 = Min, 100 = Max) \"comments\":[ // Source to use for comments; 'youtube' or 'reddit' \"youtube\", \"\" ], \"captions\":[ // Language captions in order of preference \"\", \"\", \"\" ], \"related_videos\":true, // Show related videos \"redirect_feed\":true, // Redirect homepage to subscription feed \"locale\":\"en-US\", // Choose interface language \"dark_mode\":true, // Use dark mode \"thin_mode\":true, // Don't include pictures in page load \"player_style\":\"invidious\", // Invidious style, the default \"player_style\":\"youtube\", // YouTube style, using a centered play button and always visible video control bar // For registered users (currently unused): \"max_results\":40, \"sort\":\"published\", \"latest_only\":false, \"unseen_only\":false, \"notifications_only\":false }","title":"Preferences"},{"location":"Search-operators/","tags":null,"text":"Invidious supports the various search filters provided by YouTube. Support for more user-friendly search is planned, see #179 . Search filters are currently implemented as key:value operators, similar to DuckDuckGo and other search engines. Operators can be added to the search query to filter results, for example: type:playlist sort:views music . When using subscriptions:true or channel:UCxxx other filters are not applied. Supported operators: sort: relevance (default) rating upload_date , date view_count , views date: hour today week month year type: all (default) video channel playlist movie show duration: short long features: Multiple can be specified, for example features:live,4k,subtitles hd subtitles creative_commons , cc live , livestream purchased 4k 360 location hdr channel: , user: UCxxxxxxxxxxxxxxxxxxxxxx author Can be ambiguous, so using UCID is recommended subscriptions: If logged in, search only for videos from subscribed channels true false","title":"Search-operators"},{"location":"Takedowns/","tags":null,"text":"While running Invidious, it is very possible you will recive a DMCA at some point. A copyright agent will probably at some point search the ID of an infringing video on a search engine and see an Invidious instance appear. At least in the United States, Invidious instances should in theory be immune to DMCA laws because of 17 U.S. Code \u00a7 512 stating that a provider is not responsible for content assuming that \"the material is transmitted through the system or network without modification of its content.\" Sample DMCA (United States) Hello, I am writing on behalf of {{website}}. I am the webmaster of {{website}} and all of its subdomains. I see you are filing a claim for {{invidious instance url}}. {{invidious instance url}} hosts Invidious, a private YouTube front-end, meaning it is simply a proxy to access YouTube assets and user generated content without tracking from Google. Thus, all content is proxied from YouTube and is not stored on our servers and if YouTube chooses to remove an asset, it will no longer appear on our site. Our {{server hosting}} {{invidious instance url}} is hosted in the United States, so the United States's laws apply. Under United States copyright law 17 U.S.C. \u00a7 512(a), part of the Digital Millennium Copyright Act, we cannot be liable for content that \"is transmitted through the system or network without modification of its content.\" As such, all takedown requests must be sent to YouTube, as we don't have any control on the data that they have on their servers. Thank you, {{name}} Sample Template (EU) Hello, I am writing on behalf of {{website}}. I am the webmaster of {{website}} and all of its subdomains. I see you are filing a claim for {{invidious instance url}}. {{invidious instance url}} hosts Invidious, a private YouTube front-end, meaning it is simply a proxy to access YouTube assets and user generated content without tracking from Google. Thus, all content is proxied from YouTube and is not stored on our servers and if YouTube chooses to remove an asset, it will no longer appear on our site. Our {{server hosting}} {{invidious instance url}} is hosted in the European Union, so the European Union's laws apply. Under the directive 2001/29/EC of the European Parliament and of the Council of 22 May 2001 on the harmonization of certain aspects of copyright and related rights in the information society, \"temporary acts of reproduction referred to in Article 2, which are transient or incidental [and] an integral and essential part of a technological process and whose sole purpose is to enable: a transmission in a network between third parties by an intermediary\" is allowed, and legal. As such, all takedown requests must be sent to YouTube, as we don't have any control on the data that they have on their servers. Thank you, {{name}}","title":"DMCA"},{"location":"Takedowns/#sample-dmca-united-states","text":"Hello, I am writing on behalf of {{website}}. I am the webmaster of {{website}} and all of its subdomains. I see you are filing a claim for {{invidious instance url}}. {{invidious instance url}} hosts Invidious, a private YouTube front-end, meaning it is simply a proxy to access YouTube assets and user generated content without tracking from Google. Thus, all content is proxied from YouTube and is not stored on our servers and if YouTube chooses to remove an asset, it will no longer appear on our site. Our {{server hosting}} {{invidious instance url}} is hosted in the United States, so the United States's laws apply. Under United States copyright law 17 U.S.C. \u00a7 512(a), part of the Digital Millennium Copyright Act, we cannot be liable for content that \"is transmitted through the system or network without modification of its content.\" As such, all takedown requests must be sent to YouTube, as we don't have any control on the data that they have on their servers. Thank you, {{name}}","title":"Sample DMCA (United States)"},{"location":"Takedowns/#sample-template-eu","text":"Hello, I am writing on behalf of {{website}}. I am the webmaster of {{website}} and all of its subdomains. I see you are filing a claim for {{invidious instance url}}. {{invidious instance url}} hosts Invidious, a private YouTube front-end, meaning it is simply a proxy to access YouTube assets and user generated content without tracking from Google. Thus, all content is proxied from YouTube and is not stored on our servers and if YouTube chooses to remove an asset, it will no longer appear on our site. Our {{server hosting}} {{invidious instance url}} is hosted in the European Union, so the European Union's laws apply. Under the directive 2001/29/EC of the European Parliament and of the Council of 22 May 2001 on the harmonization of certain aspects of copyright and related rights in the information society, \"temporary acts of reproduction referred to in Article 2, which are transient or incidental [and] an integral and essential part of a technological process and whose sole purpose is to enable: a transmission in a network between third parties by an intermediary\" is allowed, and legal. As such, all takedown requests must be sent to YouTube, as we don't have any control on the data that they have on their servers. Thank you, {{name}}","title":"Sample Template (EU)"}]}